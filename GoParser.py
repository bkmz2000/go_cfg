# Generated from GoParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if "." in __name__:
    from .GoParserBase import GoParserBase
else:
    from GoParserBase import GoParserBase

def serializedATN():
    return [
        4,1,89,1013,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,1,0,1,0,1,
        0,1,0,1,0,5,0,212,8,0,10,0,12,0,215,9,0,1,0,1,0,1,0,3,0,220,8,0,
        1,0,1,0,5,0,224,8,0,10,0,12,0,227,9,0,1,0,1,0,1,1,1,1,1,1,1,2,1,
        2,1,2,1,2,1,2,1,2,5,2,240,8,2,10,2,12,2,243,9,2,1,2,3,2,246,8,2,
        1,3,3,3,249,8,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,3,5,258,8,5,1,6,1,6,
        1,6,1,6,1,6,1,6,5,6,266,8,6,10,6,12,6,269,9,6,1,6,3,6,272,8,6,1,
        7,1,7,3,7,276,8,7,1,7,1,7,3,7,280,8,7,1,8,1,8,1,8,5,8,285,8,8,10,
        8,12,8,288,9,8,1,9,1,9,1,9,5,9,293,8,9,10,9,12,9,296,9,9,1,10,1,
        10,1,10,1,10,1,10,1,10,5,10,304,8,10,10,10,12,10,307,9,10,1,10,3,
        10,310,8,10,1,11,1,11,3,11,314,8,11,1,12,1,12,1,12,1,12,1,13,1,13,
        3,13,322,8,13,1,13,1,13,1,14,1,14,1,14,1,14,5,14,330,8,14,10,14,
        12,14,333,9,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,5,16,343,
        8,16,10,16,12,16,346,9,16,1,17,3,17,349,8,17,1,17,1,17,1,18,1,18,
        1,18,3,18,356,8,18,1,18,1,18,3,18,360,8,18,1,19,1,19,1,19,1,19,1,
        19,3,19,367,8,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,5,21,377,
        8,21,10,21,12,21,380,9,21,1,21,3,21,383,8,21,1,22,1,22,1,22,1,22,
        3,22,389,8,22,1,22,1,22,3,22,393,8,22,1,23,1,23,3,23,397,8,23,1,
        23,1,23,1,24,3,24,402,8,24,1,24,3,24,405,8,24,1,24,3,24,408,8,24,
        1,24,1,24,1,24,4,24,413,8,24,11,24,12,24,414,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,432,
        8,25,1,26,1,26,1,26,1,26,1,26,3,26,439,8,26,1,27,1,27,1,28,1,28,
        1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,3,31,455,8,31,
        1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,3,33,466,8,33,1,34,
        1,34,3,34,470,8,34,1,35,1,35,3,35,474,8,35,1,36,1,36,3,36,478,8,
        36,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,
        40,1,40,1,40,1,40,1,40,3,40,497,8,40,1,40,1,40,1,40,1,40,3,40,503,
        8,40,3,40,505,8,40,1,41,1,41,3,41,509,8,41,1,42,1,42,3,42,513,8,
        42,1,42,3,42,516,8,42,1,42,1,42,3,42,520,8,42,3,42,522,8,42,1,42,
        1,42,5,42,526,8,42,10,42,12,42,529,9,42,1,42,1,42,1,43,1,43,1,43,
        3,43,536,8,43,1,44,1,44,1,44,3,44,541,8,44,1,45,1,45,1,45,1,45,1,
        45,1,45,1,45,1,45,1,45,3,45,552,8,45,1,45,1,45,5,45,556,8,45,10,
        45,12,45,559,9,45,1,45,1,45,1,46,1,46,3,46,565,8,46,1,46,1,46,1,
        46,1,46,1,46,1,46,1,47,1,47,1,47,3,47,576,8,47,1,48,1,48,1,48,3,
        48,581,8,48,1,49,1,49,3,49,585,8,49,1,49,1,49,1,49,3,49,590,8,49,
        5,49,592,8,49,10,49,12,49,595,9,49,1,50,1,50,1,50,5,50,600,8,50,
        10,50,12,50,603,9,50,1,50,1,50,1,51,1,51,1,51,3,51,610,8,51,1,52,
        1,52,1,52,3,52,615,8,52,1,52,3,52,618,8,52,1,53,1,53,1,53,1,53,1,
        53,1,53,3,53,626,8,53,1,53,1,53,1,54,1,54,3,54,632,8,54,1,54,1,54,
        3,54,636,8,54,3,54,638,8,54,1,54,1,54,1,55,3,55,643,8,55,1,55,1,
        55,3,55,647,8,55,1,55,1,55,3,55,651,8,55,1,56,1,56,1,56,1,56,1,56,
        1,56,3,56,659,8,56,1,56,1,56,1,56,1,57,1,57,1,57,1,58,1,58,3,58,
        669,8,58,1,58,1,58,1,58,1,58,1,58,3,58,676,8,58,1,59,1,59,1,59,3,
        59,681,8,59,1,59,1,59,1,60,1,60,3,60,687,8,60,1,61,1,61,1,61,1,61,
        1,61,1,61,1,61,1,61,3,61,697,8,61,1,62,1,62,1,62,1,62,1,62,1,63,
        1,63,1,64,1,64,1,65,1,65,1,65,1,66,1,66,1,66,1,66,3,66,715,8,66,
        1,66,1,66,5,66,719,8,66,10,66,12,66,722,9,66,1,66,1,66,1,67,1,67,
        1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,
        3,69,741,8,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,3,70,751,8,
        70,1,71,1,71,1,71,1,72,1,72,3,72,758,8,72,1,73,1,73,3,73,762,8,73,
        1,74,1,74,1,74,1,74,5,74,768,8,74,10,74,12,74,771,9,74,1,74,3,74,
        774,8,74,3,74,776,8,74,1,74,1,74,1,75,3,75,781,8,75,1,75,3,75,784,
        8,75,1,75,1,75,1,76,1,76,1,76,1,76,3,76,792,8,76,1,76,1,76,1,76,
        1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,5,76,
        809,8,76,10,76,12,76,812,9,76,1,77,1,77,1,77,1,77,3,77,818,8,77,
        1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,827,8,77,5,77,829,8,77,10,
        77,12,77,832,9,77,1,78,1,78,1,78,1,78,3,78,838,8,78,1,78,1,78,1,
        79,1,79,1,79,3,79,845,8,79,1,79,1,79,1,79,1,79,3,79,851,8,79,1,80,
        1,80,1,80,3,80,856,8,80,1,81,1,81,1,81,1,81,3,81,862,8,81,1,82,1,
        82,1,83,1,83,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,86,1,86,1,86,1,
        86,1,86,1,86,1,86,1,86,1,86,1,86,3,86,885,8,86,3,86,887,8,86,1,87,
        1,87,1,87,3,87,892,8,87,3,87,894,8,87,1,87,1,87,1,88,1,88,1,88,5,
        88,901,8,88,10,88,12,88,904,9,88,1,89,1,89,1,89,3,89,909,8,89,1,
        89,1,89,1,90,1,90,3,90,915,8,90,1,91,1,91,3,91,919,8,91,1,92,1,92,
        1,92,1,92,1,92,5,92,926,8,92,10,92,12,92,929,9,92,1,92,1,92,1,93,
        1,93,1,93,1,93,3,93,937,8,93,1,93,3,93,940,8,93,1,94,1,94,1,95,3,
        95,945,8,95,1,95,1,95,3,95,949,8,95,1,96,1,96,1,96,1,96,1,97,1,97,
        1,97,1,97,1,98,1,98,3,98,961,8,98,1,98,1,98,3,98,965,8,98,1,98,3,
        98,968,8,98,1,98,1,98,1,98,1,98,1,98,3,98,975,8,98,1,98,1,98,1,99,
        1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,100,1,100,3,100,989,8,100,
        3,100,991,8,100,1,100,3,100,994,8,100,1,100,3,100,997,8,100,3,100,
        999,8,100,1,100,1,100,1,101,1,101,1,101,1,101,1,102,1,102,1,102,
        1,102,3,102,1011,8,102,1,102,0,2,152,154,103,0,2,4,6,8,10,12,14,
        16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
        60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
        134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
        166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,
        198,200,202,204,0,9,2,0,27,27,38,38,1,0,39,40,2,0,51,56,59,63,1,
        0,58,64,2,0,52,56,62,63,2,0,51,51,59,61,1,0,45,50,2,0,65,68,72,73,
        1,0,79,80,1078,0,206,1,0,0,0,2,230,1,0,0,0,4,233,1,0,0,0,6,248,1,
        0,0,0,8,252,1,0,0,0,10,257,1,0,0,0,12,259,1,0,0,0,14,273,1,0,0,0,
        16,281,1,0,0,0,18,289,1,0,0,0,20,297,1,0,0,0,22,313,1,0,0,0,24,315,
        1,0,0,0,26,319,1,0,0,0,28,325,1,0,0,0,30,336,1,0,0,0,32,339,1,0,
        0,0,34,348,1,0,0,0,36,352,1,0,0,0,38,361,1,0,0,0,40,368,1,0,0,0,
        42,370,1,0,0,0,44,384,1,0,0,0,46,394,1,0,0,0,48,412,1,0,0,0,50,431,
        1,0,0,0,52,438,1,0,0,0,54,440,1,0,0,0,56,442,1,0,0,0,58,446,1,0,
        0,0,60,449,1,0,0,0,62,454,1,0,0,0,64,458,1,0,0,0,66,462,1,0,0,0,
        68,467,1,0,0,0,70,471,1,0,0,0,72,475,1,0,0,0,74,479,1,0,0,0,76,482,
        1,0,0,0,78,484,1,0,0,0,80,487,1,0,0,0,82,508,1,0,0,0,84,510,1,0,
        0,0,86,532,1,0,0,0,88,540,1,0,0,0,90,542,1,0,0,0,92,564,1,0,0,0,
        94,572,1,0,0,0,96,580,1,0,0,0,98,584,1,0,0,0,100,596,1,0,0,0,102,
        606,1,0,0,0,104,617,1,0,0,0,106,625,1,0,0,0,108,629,1,0,0,0,110,
        642,1,0,0,0,112,658,1,0,0,0,114,663,1,0,0,0,116,675,1,0,0,0,118,
        677,1,0,0,0,120,686,1,0,0,0,122,696,1,0,0,0,124,698,1,0,0,0,126,
        703,1,0,0,0,128,705,1,0,0,0,130,707,1,0,0,0,132,710,1,0,0,0,134,
        725,1,0,0,0,136,729,1,0,0,0,138,740,1,0,0,0,140,750,1,0,0,0,142,
        752,1,0,0,0,144,755,1,0,0,0,146,761,1,0,0,0,148,763,1,0,0,0,150,
        780,1,0,0,0,152,791,1,0,0,0,154,817,1,0,0,0,156,833,1,0,0,0,158,
        850,1,0,0,0,160,855,1,0,0,0,162,861,1,0,0,0,164,863,1,0,0,0,166,
        865,1,0,0,0,168,867,1,0,0,0,170,871,1,0,0,0,172,886,1,0,0,0,174,
        888,1,0,0,0,176,897,1,0,0,0,178,908,1,0,0,0,180,914,1,0,0,0,182,
        918,1,0,0,0,184,920,1,0,0,0,186,936,1,0,0,0,188,941,1,0,0,0,190,
        944,1,0,0,0,192,950,1,0,0,0,194,954,1,0,0,0,196,958,1,0,0,0,198,
        978,1,0,0,0,200,983,1,0,0,0,202,1002,1,0,0,0,204,1010,1,0,0,0,206,
        207,3,2,1,0,207,213,3,204,102,0,208,209,3,4,2,0,209,210,3,204,102,
        0,210,212,1,0,0,0,211,208,1,0,0,0,212,215,1,0,0,0,213,211,1,0,0,
        0,213,214,1,0,0,0,214,225,1,0,0,0,215,213,1,0,0,0,216,220,3,36,18,
        0,217,220,3,38,19,0,218,220,3,10,5,0,219,216,1,0,0,0,219,217,1,0,
        0,0,219,218,1,0,0,0,220,221,1,0,0,0,221,222,3,204,102,0,222,224,
        1,0,0,0,223,219,1,0,0,0,224,227,1,0,0,0,225,223,1,0,0,0,225,226,
        1,0,0,0,226,228,1,0,0,0,227,225,1,0,0,0,228,229,5,0,0,1,229,1,1,
        0,0,0,230,231,5,14,0,0,231,232,5,27,0,0,232,3,1,0,0,0,233,245,5,
        23,0,0,234,246,3,6,3,0,235,241,5,28,0,0,236,237,3,6,3,0,237,238,
        3,204,102,0,238,240,1,0,0,0,239,236,1,0,0,0,240,243,1,0,0,0,241,
        239,1,0,0,0,241,242,1,0,0,0,242,244,1,0,0,0,243,241,1,0,0,0,244,
        246,5,29,0,0,245,234,1,0,0,0,245,235,1,0,0,0,246,5,1,0,0,0,247,249,
        7,0,0,0,248,247,1,0,0,0,248,249,1,0,0,0,249,250,1,0,0,0,250,251,
        3,8,4,0,251,7,1,0,0,0,252,253,3,188,94,0,253,9,1,0,0,0,254,258,3,
        12,6,0,255,258,3,20,10,0,256,258,3,42,21,0,257,254,1,0,0,0,257,255,
        1,0,0,0,257,256,1,0,0,0,258,11,1,0,0,0,259,271,5,16,0,0,260,272,
        3,14,7,0,261,267,5,28,0,0,262,263,3,14,7,0,263,264,3,204,102,0,264,
        266,1,0,0,0,265,262,1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,267,
        268,1,0,0,0,268,270,1,0,0,0,269,267,1,0,0,0,270,272,5,29,0,0,271,
        260,1,0,0,0,271,261,1,0,0,0,272,13,1,0,0,0,273,279,3,16,8,0,274,
        276,3,116,58,0,275,274,1,0,0,0,275,276,1,0,0,0,276,277,1,0,0,0,277,
        278,5,34,0,0,278,280,3,18,9,0,279,275,1,0,0,0,279,280,1,0,0,0,280,
        15,1,0,0,0,281,286,5,27,0,0,282,283,5,35,0,0,283,285,5,27,0,0,284,
        282,1,0,0,0,285,288,1,0,0,0,286,284,1,0,0,0,286,287,1,0,0,0,287,
        17,1,0,0,0,288,286,1,0,0,0,289,294,3,152,76,0,290,291,5,35,0,0,291,
        293,3,152,76,0,292,290,1,0,0,0,293,296,1,0,0,0,294,292,1,0,0,0,294,
        295,1,0,0,0,295,19,1,0,0,0,296,294,1,0,0,0,297,309,5,20,0,0,298,
        310,3,22,11,0,299,305,5,28,0,0,300,301,3,22,11,0,301,302,3,204,102,
        0,302,304,1,0,0,0,303,300,1,0,0,0,304,307,1,0,0,0,305,303,1,0,0,
        0,305,306,1,0,0,0,306,308,1,0,0,0,307,305,1,0,0,0,308,310,5,29,0,
        0,309,298,1,0,0,0,309,299,1,0,0,0,310,21,1,0,0,0,311,314,3,24,12,
        0,312,314,3,26,13,0,313,311,1,0,0,0,313,312,1,0,0,0,314,23,1,0,0,
        0,315,316,5,27,0,0,316,317,5,34,0,0,317,318,3,116,58,0,318,25,1,
        0,0,0,319,321,5,27,0,0,320,322,3,28,14,0,321,320,1,0,0,0,321,322,
        1,0,0,0,322,323,1,0,0,0,323,324,3,116,58,0,324,27,1,0,0,0,325,326,
        5,32,0,0,326,331,3,30,15,0,327,328,5,35,0,0,328,330,3,30,15,0,329,
        327,1,0,0,0,330,333,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,
        334,1,0,0,0,333,331,1,0,0,0,334,335,5,33,0,0,335,29,1,0,0,0,336,
        337,3,16,8,0,337,338,3,32,16,0,338,31,1,0,0,0,339,344,3,34,17,0,
        340,341,5,51,0,0,341,343,3,34,17,0,342,340,1,0,0,0,343,346,1,0,0,
        0,344,342,1,0,0,0,344,345,1,0,0,0,345,33,1,0,0,0,346,344,1,0,0,0,
        347,349,5,57,0,0,348,347,1,0,0,0,348,349,1,0,0,0,349,350,1,0,0,0,
        350,351,3,116,58,0,351,35,1,0,0,0,352,353,5,3,0,0,353,355,5,27,0,
        0,354,356,3,28,14,0,355,354,1,0,0,0,355,356,1,0,0,0,356,357,1,0,
        0,0,357,359,3,144,72,0,358,360,3,46,23,0,359,358,1,0,0,0,359,360,
        1,0,0,0,360,37,1,0,0,0,361,362,5,3,0,0,362,363,3,40,20,0,363,364,
        5,27,0,0,364,366,3,144,72,0,365,367,3,46,23,0,366,365,1,0,0,0,366,
        367,1,0,0,0,367,39,1,0,0,0,368,369,3,148,74,0,369,41,1,0,0,0,370,
        382,5,25,0,0,371,383,3,44,22,0,372,378,5,28,0,0,373,374,3,44,22,
        0,374,375,3,204,102,0,375,377,1,0,0,0,376,373,1,0,0,0,377,380,1,
        0,0,0,378,376,1,0,0,0,378,379,1,0,0,0,379,381,1,0,0,0,380,378,1,
        0,0,0,381,383,5,29,0,0,382,371,1,0,0,0,382,372,1,0,0,0,383,43,1,
        0,0,0,384,392,3,16,8,0,385,388,3,116,58,0,386,387,5,34,0,0,387,389,
        3,18,9,0,388,386,1,0,0,0,388,389,1,0,0,0,389,393,1,0,0,0,390,391,
        5,34,0,0,391,393,3,18,9,0,392,385,1,0,0,0,392,390,1,0,0,0,393,45,
        1,0,0,0,394,396,5,30,0,0,395,397,3,48,24,0,396,395,1,0,0,0,396,397,
        1,0,0,0,397,398,1,0,0,0,398,399,5,31,0,0,399,47,1,0,0,0,400,402,
        5,36,0,0,401,400,1,0,0,0,401,402,1,0,0,0,402,408,1,0,0,0,403,405,
        5,88,0,0,404,403,1,0,0,0,404,405,1,0,0,0,405,408,1,0,0,0,406,408,
        4,24,0,0,407,401,1,0,0,0,407,404,1,0,0,0,407,406,1,0,0,0,408,409,
        1,0,0,0,409,410,3,50,25,0,410,411,3,204,102,0,411,413,1,0,0,0,412,
        407,1,0,0,0,413,414,1,0,0,0,414,412,1,0,0,0,414,415,1,0,0,0,415,
        49,1,0,0,0,416,432,3,10,5,0,417,432,3,66,33,0,418,432,3,52,26,0,
        419,432,3,114,57,0,420,432,3,68,34,0,421,432,3,70,35,0,422,432,3,
        72,36,0,423,432,3,74,37,0,424,432,3,76,38,0,425,432,3,46,23,0,426,
        432,3,80,40,0,427,432,3,82,41,0,428,432,3,100,50,0,429,432,3,108,
        54,0,430,432,3,78,39,0,431,416,1,0,0,0,431,417,1,0,0,0,431,418,1,
        0,0,0,431,419,1,0,0,0,431,420,1,0,0,0,431,421,1,0,0,0,431,422,1,
        0,0,0,431,423,1,0,0,0,431,424,1,0,0,0,431,425,1,0,0,0,431,426,1,
        0,0,0,431,427,1,0,0,0,431,428,1,0,0,0,431,429,1,0,0,0,431,430,1,
        0,0,0,432,51,1,0,0,0,433,439,3,56,28,0,434,439,3,58,29,0,435,439,
        3,60,30,0,436,439,3,54,27,0,437,439,3,64,32,0,438,433,1,0,0,0,438,
        434,1,0,0,0,438,435,1,0,0,0,438,436,1,0,0,0,438,437,1,0,0,0,439,
        53,1,0,0,0,440,441,3,152,76,0,441,55,1,0,0,0,442,443,3,152,76,0,
        443,444,5,64,0,0,444,445,3,152,76,0,445,57,1,0,0,0,446,447,3,152,
        76,0,447,448,7,1,0,0,448,59,1,0,0,0,449,450,3,18,9,0,450,451,3,62,
        31,0,451,452,3,18,9,0,452,61,1,0,0,0,453,455,7,2,0,0,454,453,1,0,
        0,0,454,455,1,0,0,0,455,456,1,0,0,0,456,457,5,34,0,0,457,63,1,0,
        0,0,458,459,3,16,8,0,459,460,5,41,0,0,460,461,3,18,9,0,461,65,1,
        0,0,0,462,463,5,27,0,0,463,465,5,37,0,0,464,466,3,50,25,0,465,464,
        1,0,0,0,465,466,1,0,0,0,466,67,1,0,0,0,467,469,5,24,0,0,468,470,
        3,18,9,0,469,468,1,0,0,0,469,470,1,0,0,0,470,69,1,0,0,0,471,473,
        5,1,0,0,472,474,5,27,0,0,473,472,1,0,0,0,473,474,1,0,0,0,474,71,
        1,0,0,0,475,477,5,21,0,0,476,478,5,27,0,0,477,476,1,0,0,0,477,478,
        1,0,0,0,478,73,1,0,0,0,479,480,5,13,0,0,480,481,5,27,0,0,481,75,
        1,0,0,0,482,483,5,17,0,0,483,77,1,0,0,0,484,485,5,7,0,0,485,486,
        3,152,76,0,486,79,1,0,0,0,487,496,5,18,0,0,488,497,3,152,76,0,489,
        490,3,204,102,0,490,491,3,152,76,0,491,497,1,0,0,0,492,493,3,52,
        26,0,493,494,3,204,102,0,494,495,3,152,76,0,495,497,1,0,0,0,496,
        488,1,0,0,0,496,489,1,0,0,0,496,492,1,0,0,0,497,498,1,0,0,0,498,
        504,3,46,23,0,499,502,5,12,0,0,500,503,3,80,40,0,501,503,3,46,23,
        0,502,500,1,0,0,0,502,501,1,0,0,0,503,505,1,0,0,0,504,499,1,0,0,
        0,504,505,1,0,0,0,505,81,1,0,0,0,506,509,3,84,42,0,507,509,3,90,
        45,0,508,506,1,0,0,0,508,507,1,0,0,0,509,83,1,0,0,0,510,521,5,15,
        0,0,511,513,3,152,76,0,512,511,1,0,0,0,512,513,1,0,0,0,513,522,1,
        0,0,0,514,516,3,52,26,0,515,514,1,0,0,0,515,516,1,0,0,0,516,517,
        1,0,0,0,517,519,3,204,102,0,518,520,3,152,76,0,519,518,1,0,0,0,519,
        520,1,0,0,0,520,522,1,0,0,0,521,512,1,0,0,0,521,515,1,0,0,0,522,
        523,1,0,0,0,523,527,5,30,0,0,524,526,3,86,43,0,525,524,1,0,0,0,526,
        529,1,0,0,0,527,525,1,0,0,0,527,528,1,0,0,0,528,530,1,0,0,0,529,
        527,1,0,0,0,530,531,5,31,0,0,531,85,1,0,0,0,532,533,3,88,44,0,533,
        535,5,37,0,0,534,536,3,48,24,0,535,534,1,0,0,0,535,536,1,0,0,0,536,
        87,1,0,0,0,537,538,5,6,0,0,538,541,3,18,9,0,539,541,5,2,0,0,540,
        537,1,0,0,0,540,539,1,0,0,0,541,89,1,0,0,0,542,551,5,15,0,0,543,
        552,3,92,46,0,544,545,3,204,102,0,545,546,3,92,46,0,546,552,1,0,
        0,0,547,548,3,52,26,0,548,549,3,204,102,0,549,550,3,92,46,0,550,
        552,1,0,0,0,551,543,1,0,0,0,551,544,1,0,0,0,551,547,1,0,0,0,552,
        553,1,0,0,0,553,557,5,30,0,0,554,556,3,94,47,0,555,554,1,0,0,0,556,
        559,1,0,0,0,557,555,1,0,0,0,557,558,1,0,0,0,558,560,1,0,0,0,559,
        557,1,0,0,0,560,561,5,31,0,0,561,91,1,0,0,0,562,563,5,27,0,0,563,
        565,5,41,0,0,564,562,1,0,0,0,564,565,1,0,0,0,565,566,1,0,0,0,566,
        567,3,154,77,0,567,568,5,38,0,0,568,569,5,28,0,0,569,570,5,20,0,
        0,570,571,5,29,0,0,571,93,1,0,0,0,572,573,3,96,48,0,573,575,5,37,
        0,0,574,576,3,48,24,0,575,574,1,0,0,0,575,576,1,0,0,0,576,95,1,0,
        0,0,577,578,5,6,0,0,578,581,3,98,49,0,579,581,5,2,0,0,580,577,1,
        0,0,0,580,579,1,0,0,0,581,97,1,0,0,0,582,585,3,116,58,0,583,585,
        5,26,0,0,584,582,1,0,0,0,584,583,1,0,0,0,585,593,1,0,0,0,586,589,
        5,35,0,0,587,590,3,116,58,0,588,590,5,26,0,0,589,587,1,0,0,0,589,
        588,1,0,0,0,590,592,1,0,0,0,591,586,1,0,0,0,592,595,1,0,0,0,593,
        591,1,0,0,0,593,594,1,0,0,0,594,99,1,0,0,0,595,593,1,0,0,0,596,597,
        5,5,0,0,597,601,5,30,0,0,598,600,3,102,51,0,599,598,1,0,0,0,600,
        603,1,0,0,0,601,599,1,0,0,0,601,602,1,0,0,0,602,604,1,0,0,0,603,
        601,1,0,0,0,604,605,5,31,0,0,605,101,1,0,0,0,606,607,3,104,52,0,
        607,609,5,37,0,0,608,610,3,48,24,0,609,608,1,0,0,0,609,610,1,0,0,
        0,610,103,1,0,0,0,611,614,5,6,0,0,612,615,3,56,28,0,613,615,3,106,
        53,0,614,612,1,0,0,0,614,613,1,0,0,0,615,618,1,0,0,0,616,618,5,2,
        0,0,617,611,1,0,0,0,617,616,1,0,0,0,618,105,1,0,0,0,619,620,3,18,
        9,0,620,621,5,34,0,0,621,626,1,0,0,0,622,623,3,16,8,0,623,624,5,
        41,0,0,624,626,1,0,0,0,625,619,1,0,0,0,625,622,1,0,0,0,625,626,1,
        0,0,0,626,627,1,0,0,0,627,628,3,152,76,0,628,107,1,0,0,0,629,637,
        5,22,0,0,630,632,3,152,76,0,631,630,1,0,0,0,631,632,1,0,0,0,632,
        638,1,0,0,0,633,638,3,110,55,0,634,636,3,112,56,0,635,634,1,0,0,
        0,635,636,1,0,0,0,636,638,1,0,0,0,637,631,1,0,0,0,637,633,1,0,0,
        0,637,635,1,0,0,0,638,639,1,0,0,0,639,640,3,46,23,0,640,109,1,0,
        0,0,641,643,3,52,26,0,642,641,1,0,0,0,642,643,1,0,0,0,643,644,1,
        0,0,0,644,646,3,204,102,0,645,647,3,152,76,0,646,645,1,0,0,0,646,
        647,1,0,0,0,647,648,1,0,0,0,648,650,3,204,102,0,649,651,3,52,26,
        0,650,649,1,0,0,0,650,651,1,0,0,0,651,111,1,0,0,0,652,653,3,18,9,
        0,653,654,5,34,0,0,654,659,1,0,0,0,655,656,3,16,8,0,656,657,5,41,
        0,0,657,659,1,0,0,0,658,652,1,0,0,0,658,655,1,0,0,0,658,659,1,0,
        0,0,659,660,1,0,0,0,660,661,5,19,0,0,661,662,3,152,76,0,662,113,
        1,0,0,0,663,664,5,8,0,0,664,665,3,152,76,0,665,115,1,0,0,0,666,668,
        3,120,60,0,667,669,3,118,59,0,668,667,1,0,0,0,668,669,1,0,0,0,669,
        676,1,0,0,0,670,676,3,122,61,0,671,672,5,28,0,0,672,673,3,116,58,
        0,673,674,5,29,0,0,674,676,1,0,0,0,675,666,1,0,0,0,675,670,1,0,0,
        0,675,671,1,0,0,0,676,117,1,0,0,0,677,678,5,32,0,0,678,680,3,98,
        49,0,679,681,5,35,0,0,680,679,1,0,0,0,680,681,1,0,0,0,681,682,1,
        0,0,0,682,683,5,33,0,0,683,119,1,0,0,0,684,687,3,168,84,0,685,687,
        5,27,0,0,686,684,1,0,0,0,686,685,1,0,0,0,687,121,1,0,0,0,688,697,
        3,124,62,0,689,697,3,184,92,0,690,697,3,130,65,0,691,697,3,142,71,
        0,692,697,3,132,66,0,693,697,3,134,67,0,694,697,3,136,68,0,695,697,
        3,138,69,0,696,688,1,0,0,0,696,689,1,0,0,0,696,690,1,0,0,0,696,691,
        1,0,0,0,696,692,1,0,0,0,696,693,1,0,0,0,696,694,1,0,0,0,696,695,
        1,0,0,0,697,123,1,0,0,0,698,699,5,32,0,0,699,700,3,126,63,0,700,
        701,5,33,0,0,701,702,3,128,64,0,702,125,1,0,0,0,703,704,3,152,76,
        0,704,127,1,0,0,0,705,706,3,116,58,0,706,129,1,0,0,0,707,708,5,62,
        0,0,708,709,3,116,58,0,709,131,1,0,0,0,710,711,5,4,0,0,711,720,5,
        30,0,0,712,715,3,140,70,0,713,715,3,32,16,0,714,712,1,0,0,0,714,
        713,1,0,0,0,715,716,1,0,0,0,716,717,3,204,102,0,717,719,1,0,0,0,
        718,714,1,0,0,0,719,722,1,0,0,0,720,718,1,0,0,0,720,721,1,0,0,0,
        721,723,1,0,0,0,722,720,1,0,0,0,723,724,5,31,0,0,724,133,1,0,0,0,
        725,726,5,32,0,0,726,727,5,33,0,0,727,728,3,128,64,0,728,135,1,0,
        0,0,729,730,5,9,0,0,730,731,5,32,0,0,731,732,3,116,58,0,732,733,
        5,33,0,0,733,734,3,128,64,0,734,137,1,0,0,0,735,741,5,11,0,0,736,
        737,5,11,0,0,737,741,5,64,0,0,738,739,5,64,0,0,739,741,5,11,0,0,
        740,735,1,0,0,0,740,736,1,0,0,0,740,738,1,0,0,0,741,742,1,0,0,0,
        742,743,3,128,64,0,743,139,1,0,0,0,744,745,5,27,0,0,745,746,3,148,
        74,0,746,747,3,146,73,0,747,751,1,0,0,0,748,749,5,27,0,0,749,751,
        3,148,74,0,750,744,1,0,0,0,750,748,1,0,0,0,751,141,1,0,0,0,752,753,
        5,3,0,0,753,754,3,144,72,0,754,143,1,0,0,0,755,757,3,148,74,0,756,
        758,3,146,73,0,757,756,1,0,0,0,757,758,1,0,0,0,758,145,1,0,0,0,759,
        762,3,148,74,0,760,762,3,116,58,0,761,759,1,0,0,0,761,760,1,0,0,
        0,762,147,1,0,0,0,763,775,5,28,0,0,764,769,3,150,75,0,765,766,5,
        35,0,0,766,768,3,150,75,0,767,765,1,0,0,0,768,771,1,0,0,0,769,767,
        1,0,0,0,769,770,1,0,0,0,770,773,1,0,0,0,771,769,1,0,0,0,772,774,
        5,35,0,0,773,772,1,0,0,0,773,774,1,0,0,0,774,776,1,0,0,0,775,764,
        1,0,0,0,775,776,1,0,0,0,776,777,1,0,0,0,777,778,5,29,0,0,778,149,
        1,0,0,0,779,781,3,16,8,0,780,779,1,0,0,0,780,781,1,0,0,0,781,783,
        1,0,0,0,782,784,5,42,0,0,783,782,1,0,0,0,783,784,1,0,0,0,784,785,
        1,0,0,0,785,786,3,116,58,0,786,151,1,0,0,0,787,788,6,76,-1,0,788,
        792,3,154,77,0,789,790,7,3,0,0,790,792,3,152,76,6,791,787,1,0,0,
        0,791,789,1,0,0,0,792,810,1,0,0,0,793,794,10,5,0,0,794,795,7,4,0,
        0,795,809,3,152,76,6,796,797,10,4,0,0,797,798,7,5,0,0,798,809,3,
        152,76,5,799,800,10,3,0,0,800,801,7,6,0,0,801,809,3,152,76,4,802,
        803,10,2,0,0,803,804,5,44,0,0,804,809,3,152,76,3,805,806,10,1,0,
        0,806,807,5,43,0,0,807,809,3,152,76,2,808,793,1,0,0,0,808,796,1,
        0,0,0,808,799,1,0,0,0,808,802,1,0,0,0,808,805,1,0,0,0,809,812,1,
        0,0,0,810,808,1,0,0,0,810,811,1,0,0,0,811,153,1,0,0,0,812,810,1,
        0,0,0,813,814,6,77,-1,0,814,818,3,158,79,0,815,818,3,156,78,0,816,
        818,3,202,101,0,817,813,1,0,0,0,817,815,1,0,0,0,817,816,1,0,0,0,
        818,830,1,0,0,0,819,826,10,1,0,0,820,821,5,38,0,0,821,827,5,27,0,
        0,822,827,3,194,97,0,823,827,3,196,98,0,824,827,3,198,99,0,825,827,
        3,200,100,0,826,820,1,0,0,0,826,822,1,0,0,0,826,823,1,0,0,0,826,
        824,1,0,0,0,826,825,1,0,0,0,827,829,1,0,0,0,828,819,1,0,0,0,829,
        832,1,0,0,0,830,828,1,0,0,0,830,831,1,0,0,0,831,155,1,0,0,0,832,
        830,1,0,0,0,833,834,3,116,58,0,834,835,5,28,0,0,835,837,3,152,76,
        0,836,838,5,35,0,0,837,836,1,0,0,0,837,838,1,0,0,0,838,839,1,0,0,
        0,839,840,5,29,0,0,840,157,1,0,0,0,841,851,3,160,80,0,842,844,3,
        166,83,0,843,845,3,118,59,0,844,843,1,0,0,0,844,845,1,0,0,0,845,
        851,1,0,0,0,846,847,5,28,0,0,847,848,3,152,76,0,848,849,5,29,0,0,
        849,851,1,0,0,0,850,841,1,0,0,0,850,842,1,0,0,0,850,846,1,0,0,0,
        851,159,1,0,0,0,852,856,3,162,81,0,853,856,3,170,85,0,854,856,3,
        192,96,0,855,852,1,0,0,0,855,853,1,0,0,0,855,854,1,0,0,0,856,161,
        1,0,0,0,857,862,5,26,0,0,858,862,3,164,82,0,859,862,3,188,94,0,860,
        862,5,69,0,0,861,857,1,0,0,0,861,858,1,0,0,0,861,859,1,0,0,0,861,
        860,1,0,0,0,862,163,1,0,0,0,863,864,7,7,0,0,864,165,1,0,0,0,865,
        866,5,27,0,0,866,167,1,0,0,0,867,868,5,27,0,0,868,869,5,38,0,0,869,
        870,5,27,0,0,870,169,1,0,0,0,871,872,3,172,86,0,872,873,3,174,87,
        0,873,171,1,0,0,0,874,887,3,184,92,0,875,887,3,124,62,0,876,877,
        5,32,0,0,877,878,5,42,0,0,878,879,5,33,0,0,879,887,3,128,64,0,880,
        887,3,134,67,0,881,887,3,136,68,0,882,884,3,120,60,0,883,885,3,118,
        59,0,884,883,1,0,0,0,884,885,1,0,0,0,885,887,1,0,0,0,886,874,1,0,
        0,0,886,875,1,0,0,0,886,876,1,0,0,0,886,880,1,0,0,0,886,881,1,0,
        0,0,886,882,1,0,0,0,887,173,1,0,0,0,888,893,5,30,0,0,889,891,3,176,
        88,0,890,892,5,35,0,0,891,890,1,0,0,0,891,892,1,0,0,0,892,894,1,
        0,0,0,893,889,1,0,0,0,893,894,1,0,0,0,894,895,1,0,0,0,895,896,5,
        31,0,0,896,175,1,0,0,0,897,902,3,178,89,0,898,899,5,35,0,0,899,901,
        3,178,89,0,900,898,1,0,0,0,901,904,1,0,0,0,902,900,1,0,0,0,902,903,
        1,0,0,0,903,177,1,0,0,0,904,902,1,0,0,0,905,906,3,180,90,0,906,907,
        5,37,0,0,907,909,1,0,0,0,908,905,1,0,0,0,908,909,1,0,0,0,909,910,
        1,0,0,0,910,911,3,182,91,0,911,179,1,0,0,0,912,915,3,152,76,0,913,
        915,3,174,87,0,914,912,1,0,0,0,914,913,1,0,0,0,915,181,1,0,0,0,916,
        919,3,152,76,0,917,919,3,174,87,0,918,916,1,0,0,0,918,917,1,0,0,
        0,919,183,1,0,0,0,920,921,5,10,0,0,921,927,5,30,0,0,922,923,3,186,
        93,0,923,924,3,204,102,0,924,926,1,0,0,0,925,922,1,0,0,0,926,929,
        1,0,0,0,927,925,1,0,0,0,927,928,1,0,0,0,928,930,1,0,0,0,929,927,
        1,0,0,0,930,931,5,31,0,0,931,185,1,0,0,0,932,933,3,16,8,0,933,934,
        3,116,58,0,934,937,1,0,0,0,935,937,3,190,95,0,936,932,1,0,0,0,936,
        935,1,0,0,0,937,939,1,0,0,0,938,940,3,188,94,0,939,938,1,0,0,0,939,
        940,1,0,0,0,940,187,1,0,0,0,941,942,7,8,0,0,942,189,1,0,0,0,943,
        945,5,62,0,0,944,943,1,0,0,0,944,945,1,0,0,0,945,946,1,0,0,0,946,
        948,3,120,60,0,947,949,3,118,59,0,948,947,1,0,0,0,948,949,1,0,0,
        0,949,191,1,0,0,0,950,951,5,3,0,0,951,952,3,144,72,0,952,953,3,46,
        23,0,953,193,1,0,0,0,954,955,5,32,0,0,955,956,3,152,76,0,956,957,
        5,33,0,0,957,195,1,0,0,0,958,974,5,32,0,0,959,961,3,152,76,0,960,
        959,1,0,0,0,960,961,1,0,0,0,961,962,1,0,0,0,962,964,5,37,0,0,963,
        965,3,152,76,0,964,963,1,0,0,0,964,965,1,0,0,0,965,975,1,0,0,0,966,
        968,3,152,76,0,967,966,1,0,0,0,967,968,1,0,0,0,968,969,1,0,0,0,969,
        970,5,37,0,0,970,971,3,152,76,0,971,972,5,37,0,0,972,973,3,152,76,
        0,973,975,1,0,0,0,974,960,1,0,0,0,974,967,1,0,0,0,975,976,1,0,0,
        0,976,977,5,33,0,0,977,197,1,0,0,0,978,979,5,38,0,0,979,980,5,28,
        0,0,980,981,3,116,58,0,981,982,5,29,0,0,982,199,1,0,0,0,983,998,
        5,28,0,0,984,991,3,18,9,0,985,988,3,116,58,0,986,987,5,35,0,0,987,
        989,3,18,9,0,988,986,1,0,0,0,988,989,1,0,0,0,989,991,1,0,0,0,990,
        984,1,0,0,0,990,985,1,0,0,0,991,993,1,0,0,0,992,994,5,42,0,0,993,
        992,1,0,0,0,993,994,1,0,0,0,994,996,1,0,0,0,995,997,5,35,0,0,996,
        995,1,0,0,0,996,997,1,0,0,0,997,999,1,0,0,0,998,990,1,0,0,0,998,
        999,1,0,0,0,999,1000,1,0,0,0,1000,1001,5,29,0,0,1001,201,1,0,0,0,
        1002,1003,3,116,58,0,1003,1004,5,38,0,0,1004,1005,5,27,0,0,1005,
        203,1,0,0,0,1006,1011,5,36,0,0,1007,1011,5,0,0,1,1008,1011,5,88,
        0,0,1009,1011,4,102,7,0,1010,1006,1,0,0,0,1010,1007,1,0,0,0,1010,
        1008,1,0,0,0,1010,1009,1,0,0,0,1011,205,1,0,0,0,120,213,219,225,
        241,245,248,257,267,271,275,279,286,294,305,309,313,321,331,344,
        348,355,359,366,378,382,388,392,396,401,404,407,414,431,438,454,
        465,469,473,477,496,502,504,508,512,515,519,521,527,535,540,551,
        557,564,575,580,584,589,593,601,609,614,617,625,631,635,637,642,
        646,650,658,668,675,680,686,696,714,720,740,750,757,761,769,773,
        775,780,783,791,808,810,817,826,830,837,844,850,855,861,884,886,
        891,893,902,908,914,918,927,936,939,944,948,960,964,967,974,988,
        990,993,996,998,1010
    ]

class GoParser ( GoParserBase ):

    grammarFileName = "GoParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'break'", "'default'", "'func'", "'interface'", 
                     "'select'", "'case'", "'defer'", "'go'", "'map'", "'struct'", 
                     "'chan'", "'else'", "'goto'", "'package'", "'switch'", 
                     "'const'", "'fallthrough'", "'if'", "'range'", "'type'", 
                     "'continue'", "'for'", "'import'", "'return'", "'var'", 
                     "'nil'", "<INVALID>", "'('", "')'", "'{'", "'}'", "'['", 
                     "']'", "'='", "','", "';'", "':'", "'.'", "'++'", "'--'", 
                     "':='", "'...'", "'||'", "'&&'", "'=='", "'!='", "'<'", 
                     "'<='", "'>'", "'>='", "'|'", "'/'", "'%'", "'<<'", 
                     "'>>'", "'&^'", "'~'", "'!'", "'+'", "'-'", "'^'", 
                     "'*'", "'&'", "'<-'" ]

    symbolicNames = [ "<INVALID>", "BREAK", "DEFAULT", "FUNC", "INTERFACE", 
                      "SELECT", "CASE", "DEFER", "GO", "MAP", "STRUCT", 
                      "CHAN", "ELSE", "GOTO", "PACKAGE", "SWITCH", "CONST", 
                      "FALLTHROUGH", "IF", "RANGE", "TYPE", "CONTINUE", 
                      "FOR", "IMPORT", "RETURN", "VAR", "NIL_LIT", "IDENTIFIER", 
                      "L_PAREN", "R_PAREN", "L_CURLY", "R_CURLY", "L_BRACKET", 
                      "R_BRACKET", "ASSIGN", "COMMA", "SEMI", "COLON", "DOT", 
                      "PLUS_PLUS", "MINUS_MINUS", "DECLARE_ASSIGN", "ELLIPSIS", 
                      "LOGICAL_OR", "LOGICAL_AND", "EQUALS", "NOT_EQUALS", 
                      "LESS", "LESS_OR_EQUALS", "GREATER", "GREATER_OR_EQUALS", 
                      "OR", "DIV", "MOD", "LSHIFT", "RSHIFT", "BIT_CLEAR", 
                      "UNDERLYING", "EXCLAMATION", "PLUS", "MINUS", "CARET", 
                      "STAR", "AMPERSAND", "RECEIVE", "DECIMAL_LIT", "BINARY_LIT", 
                      "OCTAL_LIT", "HEX_LIT", "FLOAT_LIT", "DECIMAL_FLOAT_LIT", 
                      "HEX_FLOAT_LIT", "IMAGINARY_LIT", "RUNE_LIT", "BYTE_VALUE", 
                      "OCTAL_BYTE_VALUE", "HEX_BYTE_VALUE", "LITTLE_U_VALUE", 
                      "BIG_U_VALUE", "RAW_STRING_LIT", "INTERPRETED_STRING_LIT", 
                      "WS", "COMMENT", "TERMINATOR", "LINE_COMMENT", "WS_NLSEMI", 
                      "COMMENT_NLSEMI", "LINE_COMMENT_NLSEMI", "EOS", "OTHER" ]

    RULE_sourceFile = 0
    RULE_packageClause = 1
    RULE_importDecl = 2
    RULE_importSpec = 3
    RULE_importPath = 4
    RULE_declaration = 5
    RULE_constDecl = 6
    RULE_constSpec = 7
    RULE_identifierList = 8
    RULE_expressionList = 9
    RULE_typeDecl = 10
    RULE_typeSpec = 11
    RULE_aliasDecl = 12
    RULE_typeDef = 13
    RULE_typeParameters = 14
    RULE_typeParameterDecl = 15
    RULE_typeElement = 16
    RULE_typeTerm = 17
    RULE_functionDecl = 18
    RULE_methodDecl = 19
    RULE_receiver = 20
    RULE_varDecl = 21
    RULE_varSpec = 22
    RULE_block = 23
    RULE_statementList = 24
    RULE_statement = 25
    RULE_simpleStmt = 26
    RULE_expressionStmt = 27
    RULE_sendStmt = 28
    RULE_incDecStmt = 29
    RULE_assignment = 30
    RULE_assign_op = 31
    RULE_shortVarDecl = 32
    RULE_labeledStmt = 33
    RULE_returnStmt = 34
    RULE_breakStmt = 35
    RULE_continueStmt = 36
    RULE_gotoStmt = 37
    RULE_fallthroughStmt = 38
    RULE_deferStmt = 39
    RULE_ifStmt = 40
    RULE_switchStmt = 41
    RULE_exprSwitchStmt = 42
    RULE_exprCaseClause = 43
    RULE_exprSwitchCase = 44
    RULE_typeSwitchStmt = 45
    RULE_typeSwitchGuard = 46
    RULE_typeCaseClause = 47
    RULE_typeSwitchCase = 48
    RULE_typeList = 49
    RULE_selectStmt = 50
    RULE_commClause = 51
    RULE_commCase = 52
    RULE_recvStmt = 53
    RULE_forStmt = 54
    RULE_forClause = 55
    RULE_rangeClause = 56
    RULE_goStmt = 57
    RULE_type_ = 58
    RULE_typeArgs = 59
    RULE_typeName = 60
    RULE_typeLit = 61
    RULE_arrayType = 62
    RULE_arrayLength = 63
    RULE_elementType = 64
    RULE_pointerType = 65
    RULE_interfaceType = 66
    RULE_sliceType = 67
    RULE_mapType = 68
    RULE_channelType = 69
    RULE_methodSpec = 70
    RULE_functionType = 71
    RULE_signature = 72
    RULE_result = 73
    RULE_parameters = 74
    RULE_parameterDecl = 75
    RULE_expression = 76
    RULE_primaryExpr = 77
    RULE_conversion = 78
    RULE_operand = 79
    RULE_literal = 80
    RULE_basicLit = 81
    RULE_integer = 82
    RULE_operandName = 83
    RULE_qualifiedIdent = 84
    RULE_compositeLit = 85
    RULE_literalType = 86
    RULE_literalValue = 87
    RULE_elementList = 88
    RULE_keyedElement = 89
    RULE_key = 90
    RULE_element = 91
    RULE_structType = 92
    RULE_fieldDecl = 93
    RULE_string_ = 94
    RULE_embeddedField = 95
    RULE_functionLit = 96
    RULE_index = 97
    RULE_slice_ = 98
    RULE_typeAssertion = 99
    RULE_arguments = 100
    RULE_methodExpr = 101
    RULE_eos = 102

    ruleNames =  [ "sourceFile", "packageClause", "importDecl", "importSpec", 
                   "importPath", "declaration", "constDecl", "constSpec", 
                   "identifierList", "expressionList", "typeDecl", "typeSpec", 
                   "aliasDecl", "typeDef", "typeParameters", "typeParameterDecl", 
                   "typeElement", "typeTerm", "functionDecl", "methodDecl", 
                   "receiver", "varDecl", "varSpec", "block", "statementList", 
                   "statement", "simpleStmt", "expressionStmt", "sendStmt", 
                   "incDecStmt", "assignment", "assign_op", "shortVarDecl", 
                   "labeledStmt", "returnStmt", "breakStmt", "continueStmt", 
                   "gotoStmt", "fallthroughStmt", "deferStmt", "ifStmt", 
                   "switchStmt", "exprSwitchStmt", "exprCaseClause", "exprSwitchCase", 
                   "typeSwitchStmt", "typeSwitchGuard", "typeCaseClause", 
                   "typeSwitchCase", "typeList", "selectStmt", "commClause", 
                   "commCase", "recvStmt", "forStmt", "forClause", "rangeClause", 
                   "goStmt", "type_", "typeArgs", "typeName", "typeLit", 
                   "arrayType", "arrayLength", "elementType", "pointerType", 
                   "interfaceType", "sliceType", "mapType", "channelType", 
                   "methodSpec", "functionType", "signature", "result", 
                   "parameters", "parameterDecl", "expression", "primaryExpr", 
                   "conversion", "operand", "literal", "basicLit", "integer", 
                   "operandName", "qualifiedIdent", "compositeLit", "literalType", 
                   "literalValue", "elementList", "keyedElement", "key", 
                   "element", "structType", "fieldDecl", "string_", "embeddedField", 
                   "functionLit", "index", "slice_", "typeAssertion", "arguments", 
                   "methodExpr", "eos" ]

    EOF = Token.EOF
    BREAK=1
    DEFAULT=2
    FUNC=3
    INTERFACE=4
    SELECT=5
    CASE=6
    DEFER=7
    GO=8
    MAP=9
    STRUCT=10
    CHAN=11
    ELSE=12
    GOTO=13
    PACKAGE=14
    SWITCH=15
    CONST=16
    FALLTHROUGH=17
    IF=18
    RANGE=19
    TYPE=20
    CONTINUE=21
    FOR=22
    IMPORT=23
    RETURN=24
    VAR=25
    NIL_LIT=26
    IDENTIFIER=27
    L_PAREN=28
    R_PAREN=29
    L_CURLY=30
    R_CURLY=31
    L_BRACKET=32
    R_BRACKET=33
    ASSIGN=34
    COMMA=35
    SEMI=36
    COLON=37
    DOT=38
    PLUS_PLUS=39
    MINUS_MINUS=40
    DECLARE_ASSIGN=41
    ELLIPSIS=42
    LOGICAL_OR=43
    LOGICAL_AND=44
    EQUALS=45
    NOT_EQUALS=46
    LESS=47
    LESS_OR_EQUALS=48
    GREATER=49
    GREATER_OR_EQUALS=50
    OR=51
    DIV=52
    MOD=53
    LSHIFT=54
    RSHIFT=55
    BIT_CLEAR=56
    UNDERLYING=57
    EXCLAMATION=58
    PLUS=59
    MINUS=60
    CARET=61
    STAR=62
    AMPERSAND=63
    RECEIVE=64
    DECIMAL_LIT=65
    BINARY_LIT=66
    OCTAL_LIT=67
    HEX_LIT=68
    FLOAT_LIT=69
    DECIMAL_FLOAT_LIT=70
    HEX_FLOAT_LIT=71
    IMAGINARY_LIT=72
    RUNE_LIT=73
    BYTE_VALUE=74
    OCTAL_BYTE_VALUE=75
    HEX_BYTE_VALUE=76
    LITTLE_U_VALUE=77
    BIG_U_VALUE=78
    RAW_STRING_LIT=79
    INTERPRETED_STRING_LIT=80
    WS=81
    COMMENT=82
    TERMINATOR=83
    LINE_COMMENT=84
    WS_NLSEMI=85
    COMMENT_NLSEMI=86
    LINE_COMMENT_NLSEMI=87
    EOS=88
    OTHER=89

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SourceFileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def packageClause(self):
            return self.getTypedRuleContext(GoParser.PackageClauseContext,0)


        def eos(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.EosContext)
            else:
                return self.getTypedRuleContext(GoParser.EosContext,i)


        def EOF(self):
            return self.getToken(GoParser.EOF, 0)

        def importDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ImportDeclContext)
            else:
                return self.getTypedRuleContext(GoParser.ImportDeclContext,i)


        def functionDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.FunctionDeclContext)
            else:
                return self.getTypedRuleContext(GoParser.FunctionDeclContext,i)


        def methodDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.MethodDeclContext)
            else:
                return self.getTypedRuleContext(GoParser.MethodDeclContext,i)


        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(GoParser.DeclarationContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_sourceFile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceFile" ):
                listener.enterSourceFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceFile" ):
                listener.exitSourceFile(self)




    def sourceFile(self):

        localctx = GoParser.SourceFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sourceFile)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 206
            self.packageClause()
            self.state = 207
            self.eos()
            self.state = 213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==23:
                self.state = 208
                self.importDecl()
                self.state = 209
                self.eos()
                self.state = 215
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 34668552) != 0):
                self.state = 219
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
                if la_ == 1:
                    self.state = 216
                    self.functionDecl()
                    pass

                elif la_ == 2:
                    self.state = 217
                    self.methodDecl()
                    pass

                elif la_ == 3:
                    self.state = 218
                    self.declaration()
                    pass


                self.state = 221
                self.eos()
                self.state = 227
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 228
            self.match(GoParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.packageName = None # Token

        def PACKAGE(self):
            return self.getToken(GoParser.PACKAGE, 0)

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GoParser.RULE_packageClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageClause" ):
                listener.enterPackageClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageClause" ):
                listener.exitPackageClause(self)




    def packageClause(self):

        localctx = GoParser.PackageClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_packageClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 230
            self.match(GoParser.PACKAGE)
            self.state = 231
            localctx.packageName = self.match(GoParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(GoParser.IMPORT, 0)

        def importSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ImportSpecContext)
            else:
                return self.getTypedRuleContext(GoParser.ImportSpecContext,i)


        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def eos(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.EosContext)
            else:
                return self.getTypedRuleContext(GoParser.EosContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_importDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDecl" ):
                listener.enterImportDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDecl" ):
                listener.exitImportDecl(self)




    def importDecl(self):

        localctx = GoParser.ImportDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_importDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            self.match(GoParser.IMPORT)
            self.state = 245
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27, 38, 79, 80]:
                self.state = 234
                self.importSpec()
                pass
            elif token in [28]:
                self.state = 235
                self.match(GoParser.L_PAREN)
                self.state = 241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 27)) & ~0x3f) == 0 and ((1 << (_la - 27)) & 13510798882113537) != 0):
                    self.state = 236
                    self.importSpec()
                    self.state = 237
                    self.eos()
                    self.state = 243
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 244
                self.match(GoParser.R_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.alias = None # Token

        def importPath(self):
            return self.getTypedRuleContext(GoParser.ImportPathContext,0)


        def DOT(self):
            return self.getToken(GoParser.DOT, 0)

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GoParser.RULE_importSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportSpec" ):
                listener.enterImportSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportSpec" ):
                listener.exitImportSpec(self)




    def importSpec(self):

        localctx = GoParser.ImportSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_importSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27 or _la==38:
                self.state = 247
                localctx.alias = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==27 or _la==38):
                    localctx.alias = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 250
            self.importPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_(self):
            return self.getTypedRuleContext(GoParser.String_Context,0)


        def getRuleIndex(self):
            return GoParser.RULE_importPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportPath" ):
                listener.enterImportPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportPath" ):
                listener.exitImportPath(self)

    def importPath(self):
        localctx = GoParser.ImportPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_importPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 252
            self.string_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constDecl(self):
            return self.getTypedRuleContext(GoParser.ConstDeclContext,0)


        def typeDecl(self):
            return self.getTypedRuleContext(GoParser.TypeDeclContext,0)


        def varDecl(self):
            return self.getTypedRuleContext(GoParser.VarDeclContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = GoParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_declaration)
        try:
            self.state = 257
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16]:
                self.enterOuterAlt(localctx, 1)
                self.state = 254
                self.constDecl()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 2)
                self.state = 255
                self.typeDecl()
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 3)
                self.state = 256
                self.varDecl()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(GoParser.CONST, 0)

        def constSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ConstSpecContext)
            else:
                return self.getTypedRuleContext(GoParser.ConstSpecContext,i)


        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def eos(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.EosContext)
            else:
                return self.getTypedRuleContext(GoParser.EosContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_constDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDecl" ):
                listener.enterConstDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDecl" ):
                listener.exitConstDecl(self)




    def constDecl(self):

        localctx = GoParser.ConstDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_constDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            self.match(GoParser.CONST)
            self.state = 271
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27]:
                self.state = 260
                self.constSpec()
                pass
            elif token in [28]:
                self.state = 261
                self.match(GoParser.L_PAREN)
                self.state = 267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==27:
                    self.state = 262
                    self.constSpec()
                    self.state = 263
                    self.eos()
                    self.state = 269
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 270
                self.match(GoParser.R_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(GoParser.IdentifierListContext,0)


        def ASSIGN(self):
            return self.getToken(GoParser.ASSIGN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(GoParser.ExpressionListContext,0)


        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def getRuleIndex(self):
            return GoParser.RULE_constSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstSpec" ):
                listener.enterConstSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstSpec" ):
                listener.exitConstSpec(self)




    def constSpec(self):

        localctx = GoParser.ConstSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_constSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            self.identifierList()
            self.state = 279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 2882303762104320451) != 0):
                    self.state = 274
                    self.type_()


                self.state = 277
                self.match(GoParser.ASSIGN)
                self.state = 278
                self.expressionList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.IDENTIFIER)
            else:
                return self.getToken(GoParser.IDENTIFIER, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.COMMA)
            else:
                return self.getToken(GoParser.COMMA, i)

        def getRuleIndex(self):
            return GoParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = GoParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_identifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self.match(GoParser.IDENTIFIER)
            self.state = 286
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 282
                    self.match(GoParser.COMMA)
                    self.state = 283
                    self.match(GoParser.IDENTIFIER) 
                self.state = 288
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GoParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.COMMA)
            else:
                return self.getToken(GoParser.COMMA, i)

        def getRuleIndex(self):
            return GoParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = GoParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_expressionList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self.expression(0)
            self.state = 294
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 290
                    self.match(GoParser.COMMA)
                    self.state = 291
                    self.expression(0) 
                self.state = 296
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(GoParser.TYPE, 0)

        def typeSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.TypeSpecContext)
            else:
                return self.getTypedRuleContext(GoParser.TypeSpecContext,i)


        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def eos(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.EosContext)
            else:
                return self.getTypedRuleContext(GoParser.EosContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_typeDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDecl" ):
                listener.enterTypeDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDecl" ):
                listener.exitTypeDecl(self)




    def typeDecl(self):

        localctx = GoParser.TypeDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_typeDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            self.match(GoParser.TYPE)
            self.state = 309
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27]:
                self.state = 298
                self.typeSpec()
                pass
            elif token in [28]:
                self.state = 299
                self.match(GoParser.L_PAREN)
                self.state = 305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==27:
                    self.state = 300
                    self.typeSpec()
                    self.state = 301
                    self.eos()
                    self.state = 307
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 308
                self.match(GoParser.R_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aliasDecl(self):
            return self.getTypedRuleContext(GoParser.AliasDeclContext,0)


        def typeDef(self):
            return self.getTypedRuleContext(GoParser.TypeDefContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_typeSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpec" ):
                listener.enterTypeSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpec" ):
                listener.exitTypeSpec(self)




    def typeSpec(self):

        localctx = GoParser.TypeSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_typeSpec)
        try:
            self.state = 313
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 311
                self.aliasDecl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 312
                self.typeDef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def ASSIGN(self):
            return self.getToken(GoParser.ASSIGN, 0)

        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def getRuleIndex(self):
            return GoParser.RULE_aliasDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasDecl" ):
                listener.enterAliasDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasDecl" ):
                listener.exitAliasDecl(self)




    def aliasDecl(self):

        localctx = GoParser.AliasDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_aliasDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            self.match(GoParser.IDENTIFIER)
            self.state = 316
            self.match(GoParser.ASSIGN)
            self.state = 317
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def typeParameters(self):
            return self.getTypedRuleContext(GoParser.TypeParametersContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_typeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDef" ):
                listener.enterTypeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDef" ):
                listener.exitTypeDef(self)




    def typeDef(self):

        localctx = GoParser.TypeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_typeDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 319
            self.match(GoParser.IDENTIFIER)
            self.state = 321
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 320
                self.typeParameters()


            self.state = 323
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_BRACKET(self):
            return self.getToken(GoParser.L_BRACKET, 0)

        def typeParameterDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.TypeParameterDeclContext)
            else:
                return self.getTypedRuleContext(GoParser.TypeParameterDeclContext,i)


        def R_BRACKET(self):
            return self.getToken(GoParser.R_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.COMMA)
            else:
                return self.getToken(GoParser.COMMA, i)

        def getRuleIndex(self):
            return GoParser.RULE_typeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameters" ):
                listener.enterTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameters" ):
                listener.exitTypeParameters(self)




    def typeParameters(self):

        localctx = GoParser.TypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_typeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 325
            self.match(GoParser.L_BRACKET)
            self.state = 326
            self.typeParameterDecl()
            self.state = 331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==35:
                self.state = 327
                self.match(GoParser.COMMA)
                self.state = 328
                self.typeParameterDecl()
                self.state = 333
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 334
            self.match(GoParser.R_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(GoParser.IdentifierListContext,0)


        def typeElement(self):
            return self.getTypedRuleContext(GoParser.TypeElementContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_typeParameterDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterDecl" ):
                listener.enterTypeParameterDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterDecl" ):
                listener.exitTypeParameterDecl(self)




    def typeParameterDecl(self):

        localctx = GoParser.TypeParameterDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_typeParameterDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.identifierList()
            self.state = 337
            self.typeElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.TypeTermContext)
            else:
                return self.getTypedRuleContext(GoParser.TypeTermContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.OR)
            else:
                return self.getToken(GoParser.OR, i)

        def getRuleIndex(self):
            return GoParser.RULE_typeElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeElement" ):
                listener.enterTypeElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeElement" ):
                listener.exitTypeElement(self)




    def typeElement(self):

        localctx = GoParser.TypeElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_typeElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self.typeTerm()
            self.state = 344
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 340
                    self.match(GoParser.OR)
                    self.state = 341
                    self.typeTerm() 
                self.state = 346
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def UNDERLYING(self):
            return self.getToken(GoParser.UNDERLYING, 0)

        def getRuleIndex(self):
            return GoParser.RULE_typeTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeTerm" ):
                listener.enterTypeTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeTerm" ):
                listener.exitTypeTerm(self)




    def typeTerm(self):

        localctx = GoParser.TypeTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_typeTerm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 347
                self.match(GoParser.UNDERLYING)


            self.state = 350
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(GoParser.FUNC, 0)

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def signature(self):
            return self.getTypedRuleContext(GoParser.SignatureContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(GoParser.TypeParametersContext,0)


        def block(self):
            return self.getTypedRuleContext(GoParser.BlockContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_functionDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDecl" ):
                listener.enterFunctionDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDecl" ):
                listener.exitFunctionDecl(self)




    def functionDecl(self):

        localctx = GoParser.FunctionDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_functionDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.match(GoParser.FUNC)
            self.state = 353
            self.match(GoParser.IDENTIFIER)
            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 354
                self.typeParameters()


            self.state = 357
            self.signature()
            self.state = 359
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 358
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(GoParser.FUNC, 0)

        def receiver(self):
            return self.getTypedRuleContext(GoParser.ReceiverContext,0)


        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def signature(self):
            return self.getTypedRuleContext(GoParser.SignatureContext,0)


        def block(self):
            return self.getTypedRuleContext(GoParser.BlockContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_methodDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDecl" ):
                listener.enterMethodDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDecl" ):
                listener.exitMethodDecl(self)




    def methodDecl(self):

        localctx = GoParser.MethodDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_methodDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 361
            self.match(GoParser.FUNC)
            self.state = 362
            self.receiver()
            self.state = 363
            self.match(GoParser.IDENTIFIER)
            self.state = 364
            self.signature()
            self.state = 366
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 365
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameters(self):
            return self.getTypedRuleContext(GoParser.ParametersContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_receiver

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiver" ):
                listener.enterReceiver(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiver" ):
                listener.exitReceiver(self)




    def receiver(self):

        localctx = GoParser.ReceiverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_receiver)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self.parameters()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(GoParser.VAR, 0)

        def varSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.VarSpecContext)
            else:
                return self.getTypedRuleContext(GoParser.VarSpecContext,i)


        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def eos(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.EosContext)
            else:
                return self.getTypedRuleContext(GoParser.EosContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_varDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarDecl" ):
                listener.enterVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarDecl" ):
                listener.exitVarDecl(self)




    def varDecl(self):

        localctx = GoParser.VarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_varDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370
            self.match(GoParser.VAR)
            self.state = 382
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27]:
                self.state = 371
                self.varSpec()
                pass
            elif token in [28]:
                self.state = 372
                self.match(GoParser.L_PAREN)
                self.state = 378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==27:
                    self.state = 373
                    self.varSpec()
                    self.state = 374
                    self.eos()
                    self.state = 380
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 381
                self.match(GoParser.R_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(GoParser.IdentifierListContext,0)


        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def ASSIGN(self):
            return self.getToken(GoParser.ASSIGN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(GoParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_varSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarSpec" ):
                listener.enterVarSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarSpec" ):
                listener.exitVarSpec(self)




    def varSpec(self):

        localctx = GoParser.VarSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_varSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.identifierList()
            self.state = 392
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 9, 10, 11, 27, 28, 32, 62, 64]:
                self.state = 385
                self.type_()
                self.state = 388
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                if la_ == 1:
                    self.state = 386
                    self.match(GoParser.ASSIGN)
                    self.state = 387
                    self.expressionList()


                pass
            elif token in [34]:
                self.state = 390
                self.match(GoParser.ASSIGN)
                self.state = 391
                self.expressionList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_CURLY(self):
            return self.getToken(GoParser.L_CURLY, 0)

        def R_CURLY(self):
            return self.getToken(GoParser.R_CURLY, 0)

        def statementList(self):
            return self.getTypedRuleContext(GoParser.StatementListContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = GoParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            self.match(GoParser.L_CURLY)
            self.state = 396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 395
                self.statementList()


            self.state = 398
            self.match(GoParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.StatementContext)
            else:
                return self.getTypedRuleContext(GoParser.StatementContext,i)


        def eos(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.EosContext)
            else:
                return self.getTypedRuleContext(GoParser.EosContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.SEMI)
            else:
                return self.getToken(GoParser.SEMI, i)

        def EOS(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.EOS)
            else:
                return self.getToken(GoParser.EOS, i)

        def getRuleIndex(self):
            return GoParser.RULE_statementList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementList" ):
                listener.enterStatementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementList" ):
                listener.exitStatementList(self)




    def statementList(self):

        localctx = GoParser.StatementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_statementList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 407
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                    if la_ == 1:
                        self.state = 401
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==36:
                            self.state = 400
                            self.match(GoParser.SEMI)


                        pass

                    elif la_ == 2:
                        self.state = 404
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==88:
                            self.state = 403
                            self.match(GoParser.EOS)


                        pass

                    elif la_ == 3:
                        self.state = 406
                        if not self.closingBracket():
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.closingBracket()")
                        pass


                    self.state = 409
                    self.statement()
                    self.state = 410
                    self.eos()

                else:
                    raise NoViableAltException(self)
                self.state = 414 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(GoParser.DeclarationContext,0)


        def labeledStmt(self):
            return self.getTypedRuleContext(GoParser.LabeledStmtContext,0)


        def simpleStmt(self):
            return self.getTypedRuleContext(GoParser.SimpleStmtContext,0)


        def goStmt(self):
            return self.getTypedRuleContext(GoParser.GoStmtContext,0)


        def returnStmt(self):
            return self.getTypedRuleContext(GoParser.ReturnStmtContext,0)


        def breakStmt(self):
            return self.getTypedRuleContext(GoParser.BreakStmtContext,0)


        def continueStmt(self):
            return self.getTypedRuleContext(GoParser.ContinueStmtContext,0)


        def gotoStmt(self):
            return self.getTypedRuleContext(GoParser.GotoStmtContext,0)


        def fallthroughStmt(self):
            return self.getTypedRuleContext(GoParser.FallthroughStmtContext,0)


        def block(self):
            return self.getTypedRuleContext(GoParser.BlockContext,0)


        def ifStmt(self):
            return self.getTypedRuleContext(GoParser.IfStmtContext,0)


        def switchStmt(self):
            return self.getTypedRuleContext(GoParser.SwitchStmtContext,0)


        def selectStmt(self):
            return self.getTypedRuleContext(GoParser.SelectStmtContext,0)


        def forStmt(self):
            return self.getTypedRuleContext(GoParser.ForStmtContext,0)


        def deferStmt(self):
            return self.getTypedRuleContext(GoParser.DeferStmtContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = GoParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_statement)
        try:
            self.state = 431
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 416
                self.declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 417
                self.labeledStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 418
                self.simpleStmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 419
                self.goStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 420
                self.returnStmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 421
                self.breakStmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 422
                self.continueStmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 423
                self.gotoStmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 424
                self.fallthroughStmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 425
                self.block()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 426
                self.ifStmt()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 427
                self.switchStmt()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 428
                self.selectStmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 429
                self.forStmt()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 430
                self.deferStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sendStmt(self):
            return self.getTypedRuleContext(GoParser.SendStmtContext,0)


        def incDecStmt(self):
            return self.getTypedRuleContext(GoParser.IncDecStmtContext,0)


        def assignment(self):
            return self.getTypedRuleContext(GoParser.AssignmentContext,0)


        def expressionStmt(self):
            return self.getTypedRuleContext(GoParser.ExpressionStmtContext,0)


        def shortVarDecl(self):
            return self.getTypedRuleContext(GoParser.ShortVarDeclContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_simpleStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStmt" ):
                listener.enterSimpleStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStmt" ):
                listener.exitSimpleStmt(self)




    def simpleStmt(self):

        localctx = GoParser.SimpleStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_simpleStmt)
        try:
            self.state = 438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 433
                self.sendStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 434
                self.incDecStmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 435
                self.assignment()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 436
                self.expressionStmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 437
                self.shortVarDecl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_expressionStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStmt" ):
                listener.enterExpressionStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStmt" ):
                listener.exitExpressionStmt(self)




    def expressionStmt(self):

        localctx = GoParser.ExpressionStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_expressionStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SendStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.channel = None # ExpressionContext

        def RECEIVE(self):
            return self.getToken(GoParser.RECEIVE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GoParser.ExpressionContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_sendStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSendStmt" ):
                listener.enterSendStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSendStmt" ):
                listener.exitSendStmt(self)




    def sendStmt(self):

        localctx = GoParser.SendStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_sendStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            localctx.channel = self.expression(0)
            self.state = 443
            self.match(GoParser.RECEIVE)
            self.state = 444
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncDecStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def PLUS_PLUS(self):
            return self.getToken(GoParser.PLUS_PLUS, 0)

        def MINUS_MINUS(self):
            return self.getToken(GoParser.MINUS_MINUS, 0)

        def getRuleIndex(self):
            return GoParser.RULE_incDecStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncDecStmt" ):
                listener.enterIncDecStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncDecStmt" ):
                listener.exitIncDecStmt(self)




    def incDecStmt(self):

        localctx = GoParser.IncDecStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_incDecStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.expression(0)
            self.state = 447
            _la = self._input.LA(1)
            if not(_la==39 or _la==40):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ExpressionListContext)
            else:
                return self.getTypedRuleContext(GoParser.ExpressionListContext,i)


        def assign_op(self):
            return self.getTypedRuleContext(GoParser.Assign_opContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = GoParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self.expressionList()
            self.state = 450
            self.assign_op()
            self.state = 451
            self.expressionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(GoParser.ASSIGN, 0)

        def PLUS(self):
            return self.getToken(GoParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(GoParser.MINUS, 0)

        def OR(self):
            return self.getToken(GoParser.OR, 0)

        def CARET(self):
            return self.getToken(GoParser.CARET, 0)

        def STAR(self):
            return self.getToken(GoParser.STAR, 0)

        def DIV(self):
            return self.getToken(GoParser.DIV, 0)

        def MOD(self):
            return self.getToken(GoParser.MOD, 0)

        def LSHIFT(self):
            return self.getToken(GoParser.LSHIFT, 0)

        def RSHIFT(self):
            return self.getToken(GoParser.RSHIFT, 0)

        def AMPERSAND(self):
            return self.getToken(GoParser.AMPERSAND, 0)

        def BIT_CLEAR(self):
            return self.getToken(GoParser.BIT_CLEAR, 0)

        def getRuleIndex(self):
            return GoParser.RULE_assign_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_op" ):
                listener.enterAssign_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_op" ):
                listener.exitAssign_op(self)




    def assign_op(self):

        localctx = GoParser.Assign_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_assign_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -434597364041252864) != 0):
                self.state = 453
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -434597364041252864) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 456
            self.match(GoParser.ASSIGN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShortVarDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierList(self):
            return self.getTypedRuleContext(GoParser.IdentifierListContext,0)


        def DECLARE_ASSIGN(self):
            return self.getToken(GoParser.DECLARE_ASSIGN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(GoParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_shortVarDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShortVarDecl" ):
                listener.enterShortVarDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShortVarDecl" ):
                listener.exitShortVarDecl(self)




    def shortVarDecl(self):

        localctx = GoParser.ShortVarDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_shortVarDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.identifierList()
            self.state = 459
            self.match(GoParser.DECLARE_ASSIGN)
            self.state = 460
            self.expressionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def COLON(self):
            return self.getToken(GoParser.COLON, 0)

        def statement(self):
            return self.getTypedRuleContext(GoParser.StatementContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_labeledStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledStmt" ):
                listener.enterLabeledStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledStmt" ):
                listener.exitLabeledStmt(self)




    def labeledStmt(self):

        localctx = GoParser.LabeledStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_labeledStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.match(GoParser.IDENTIFIER)
            self.state = 463
            self.match(GoParser.COLON)
            self.state = 465
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 464
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(GoParser.RETURN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(GoParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_returnStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)




    def returnStmt(self):

        localctx = GoParser.ReturnStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_returnStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self.match(GoParser.RETURN)
            self.state = 469
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.state = 468
                self.expressionList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(GoParser.BREAK, 0)

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GoParser.RULE_breakStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStmt" ):
                listener.enterBreakStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStmt" ):
                listener.exitBreakStmt(self)




    def breakStmt(self):

        localctx = GoParser.BreakStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_breakStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471
            self.match(GoParser.BREAK)
            self.state = 473
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 472
                self.match(GoParser.IDENTIFIER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(GoParser.CONTINUE, 0)

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GoParser.RULE_continueStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStmt" ):
                listener.enterContinueStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStmt" ):
                listener.exitContinueStmt(self)




    def continueStmt(self):

        localctx = GoParser.ContinueStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_continueStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self.match(GoParser.CONTINUE)
            self.state = 477
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 476
                self.match(GoParser.IDENTIFIER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GotoStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GOTO(self):
            return self.getToken(GoParser.GOTO, 0)

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GoParser.RULE_gotoStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGotoStmt" ):
                listener.enterGotoStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGotoStmt" ):
                listener.exitGotoStmt(self)




    def gotoStmt(self):

        localctx = GoParser.GotoStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_gotoStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            self.match(GoParser.GOTO)
            self.state = 480
            self.match(GoParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FallthroughStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FALLTHROUGH(self):
            return self.getToken(GoParser.FALLTHROUGH, 0)

        def getRuleIndex(self):
            return GoParser.RULE_fallthroughStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFallthroughStmt" ):
                listener.enterFallthroughStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFallthroughStmt" ):
                listener.exitFallthroughStmt(self)




    def fallthroughStmt(self):

        localctx = GoParser.FallthroughStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_fallthroughStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482
            self.match(GoParser.FALLTHROUGH)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeferStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFER(self):
            return self.getToken(GoParser.DEFER, 0)

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_deferStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeferStmt" ):
                listener.enterDeferStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeferStmt" ):
                listener.exitDeferStmt(self)




    def deferStmt(self):

        localctx = GoParser.DeferStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_deferStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 484
            self.match(GoParser.DEFER)
            self.state = 485
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(GoParser.IF, 0)

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.BlockContext)
            else:
                return self.getTypedRuleContext(GoParser.BlockContext,i)


        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def eos(self):
            return self.getTypedRuleContext(GoParser.EosContext,0)


        def simpleStmt(self):
            return self.getTypedRuleContext(GoParser.SimpleStmtContext,0)


        def ELSE(self):
            return self.getToken(GoParser.ELSE, 0)

        def ifStmt(self):
            return self.getTypedRuleContext(GoParser.IfStmtContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_ifStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)




    def ifStmt(self):

        localctx = GoParser.IfStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_ifStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.match(GoParser.IF)
            self.state = 496
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 488
                self.expression(0)
                pass

            elif la_ == 2:
                self.state = 489
                self.eos()
                self.state = 490
                self.expression(0)
                pass

            elif la_ == 3:
                self.state = 492
                self.simpleStmt()
                self.state = 493
                self.eos()
                self.state = 494
                self.expression(0)
                pass


            self.state = 498
            self.block()
            self.state = 504
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 499
                self.match(GoParser.ELSE)
                self.state = 502
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [18]:
                    self.state = 500
                    self.ifStmt()
                    pass
                elif token in [30]:
                    self.state = 501
                    self.block()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprSwitchStmt(self):
            return self.getTypedRuleContext(GoParser.ExprSwitchStmtContext,0)


        def typeSwitchStmt(self):
            return self.getTypedRuleContext(GoParser.TypeSwitchStmtContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_switchStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStmt" ):
                listener.enterSwitchStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStmt" ):
                listener.exitSwitchStmt(self)




    def switchStmt(self):

        localctx = GoParser.SwitchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_switchStmt)
        try:
            self.state = 508
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 506
                self.exprSwitchStmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 507
                self.typeSwitchStmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprSwitchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(GoParser.SWITCH, 0)

        def L_CURLY(self):
            return self.getToken(GoParser.L_CURLY, 0)

        def R_CURLY(self):
            return self.getToken(GoParser.R_CURLY, 0)

        def eos(self):
            return self.getTypedRuleContext(GoParser.EosContext,0)


        def exprCaseClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ExprCaseClauseContext)
            else:
                return self.getTypedRuleContext(GoParser.ExprCaseClauseContext,i)


        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def simpleStmt(self):
            return self.getTypedRuleContext(GoParser.SimpleStmtContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_exprSwitchStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprSwitchStmt" ):
                listener.enterExprSwitchStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprSwitchStmt" ):
                listener.exitExprSwitchStmt(self)




    def exprSwitchStmt(self):

        localctx = GoParser.ExprSwitchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_exprSwitchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self.match(GoParser.SWITCH)
            self.state = 521
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 512
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -288230371386978792) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 99135) != 0):
                    self.state = 511
                    self.expression(0)


                pass

            elif la_ == 2:
                self.state = 515
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 514
                    self.simpleStmt()


                self.state = 517
                self.eos()
                self.state = 519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -288230371386978792) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 99135) != 0):
                    self.state = 518
                    self.expression(0)


                pass


            self.state = 523
            self.match(GoParser.L_CURLY)
            self.state = 527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==6:
                self.state = 524
                self.exprCaseClause()
                self.state = 529
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 530
            self.match(GoParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprCaseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprSwitchCase(self):
            return self.getTypedRuleContext(GoParser.ExprSwitchCaseContext,0)


        def COLON(self):
            return self.getToken(GoParser.COLON, 0)

        def statementList(self):
            return self.getTypedRuleContext(GoParser.StatementListContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_exprCaseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprCaseClause" ):
                listener.enterExprCaseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprCaseClause" ):
                listener.exitExprCaseClause(self)




    def exprCaseClause(self):

        localctx = GoParser.ExprCaseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_exprCaseClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 532
            self.exprSwitchCase()
            self.state = 533
            self.match(GoParser.COLON)
            self.state = 535
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 534
                self.statementList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprSwitchCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(GoParser.CASE, 0)

        def expressionList(self):
            return self.getTypedRuleContext(GoParser.ExpressionListContext,0)


        def DEFAULT(self):
            return self.getToken(GoParser.DEFAULT, 0)

        def getRuleIndex(self):
            return GoParser.RULE_exprSwitchCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprSwitchCase" ):
                listener.enterExprSwitchCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprSwitchCase" ):
                listener.exitExprSwitchCase(self)




    def exprSwitchCase(self):

        localctx = GoParser.ExprSwitchCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_exprSwitchCase)
        try:
            self.state = 540
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 537
                self.match(GoParser.CASE)
                self.state = 538
                self.expressionList()
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 539
                self.match(GoParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSwitchStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(GoParser.SWITCH, 0)

        def L_CURLY(self):
            return self.getToken(GoParser.L_CURLY, 0)

        def R_CURLY(self):
            return self.getToken(GoParser.R_CURLY, 0)

        def typeSwitchGuard(self):
            return self.getTypedRuleContext(GoParser.TypeSwitchGuardContext,0)


        def eos(self):
            return self.getTypedRuleContext(GoParser.EosContext,0)


        def simpleStmt(self):
            return self.getTypedRuleContext(GoParser.SimpleStmtContext,0)


        def typeCaseClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.TypeCaseClauseContext)
            else:
                return self.getTypedRuleContext(GoParser.TypeCaseClauseContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_typeSwitchStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSwitchStmt" ):
                listener.enterTypeSwitchStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSwitchStmt" ):
                listener.exitTypeSwitchStmt(self)




    def typeSwitchStmt(self):

        localctx = GoParser.TypeSwitchStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_typeSwitchStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self.match(GoParser.SWITCH)
            self.state = 551
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 543
                self.typeSwitchGuard()
                pass

            elif la_ == 2:
                self.state = 544
                self.eos()
                self.state = 545
                self.typeSwitchGuard()
                pass

            elif la_ == 3:
                self.state = 547
                self.simpleStmt()
                self.state = 548
                self.eos()
                self.state = 549
                self.typeSwitchGuard()
                pass


            self.state = 553
            self.match(GoParser.L_CURLY)
            self.state = 557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==6:
                self.state = 554
                self.typeCaseClause()
                self.state = 559
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 560
            self.match(GoParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSwitchGuardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpr(self):
            return self.getTypedRuleContext(GoParser.PrimaryExprContext,0)


        def DOT(self):
            return self.getToken(GoParser.DOT, 0)

        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def TYPE(self):
            return self.getToken(GoParser.TYPE, 0)

        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def DECLARE_ASSIGN(self):
            return self.getToken(GoParser.DECLARE_ASSIGN, 0)

        def getRuleIndex(self):
            return GoParser.RULE_typeSwitchGuard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSwitchGuard" ):
                listener.enterTypeSwitchGuard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSwitchGuard" ):
                listener.exitTypeSwitchGuard(self)




    def typeSwitchGuard(self):

        localctx = GoParser.TypeSwitchGuardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_typeSwitchGuard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 562
                self.match(GoParser.IDENTIFIER)
                self.state = 563
                self.match(GoParser.DECLARE_ASSIGN)


            self.state = 566
            self.primaryExpr(0)
            self.state = 567
            self.match(GoParser.DOT)
            self.state = 568
            self.match(GoParser.L_PAREN)
            self.state = 569
            self.match(GoParser.TYPE)
            self.state = 570
            self.match(GoParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeCaseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSwitchCase(self):
            return self.getTypedRuleContext(GoParser.TypeSwitchCaseContext,0)


        def COLON(self):
            return self.getToken(GoParser.COLON, 0)

        def statementList(self):
            return self.getTypedRuleContext(GoParser.StatementListContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_typeCaseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeCaseClause" ):
                listener.enterTypeCaseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeCaseClause" ):
                listener.exitTypeCaseClause(self)




    def typeCaseClause(self):

        localctx = GoParser.TypeCaseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_typeCaseClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self.typeSwitchCase()
            self.state = 573
            self.match(GoParser.COLON)
            self.state = 575
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 574
                self.statementList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSwitchCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(GoParser.CASE, 0)

        def typeList(self):
            return self.getTypedRuleContext(GoParser.TypeListContext,0)


        def DEFAULT(self):
            return self.getToken(GoParser.DEFAULT, 0)

        def getRuleIndex(self):
            return GoParser.RULE_typeSwitchCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSwitchCase" ):
                listener.enterTypeSwitchCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSwitchCase" ):
                listener.exitTypeSwitchCase(self)




    def typeSwitchCase(self):

        localctx = GoParser.TypeSwitchCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_typeSwitchCase)
        try:
            self.state = 580
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 577
                self.match(GoParser.CASE)
                self.state = 578
                self.typeList()
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 579
                self.match(GoParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.Type_Context)
            else:
                return self.getTypedRuleContext(GoParser.Type_Context,i)


        def NIL_LIT(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.NIL_LIT)
            else:
                return self.getToken(GoParser.NIL_LIT, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.COMMA)
            else:
                return self.getToken(GoParser.COMMA, i)

        def getRuleIndex(self):
            return GoParser.RULE_typeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeList" ):
                listener.enterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeList" ):
                listener.exitTypeList(self)




    def typeList(self):

        localctx = GoParser.TypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_typeList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 9, 10, 11, 27, 28, 32, 62, 64]:
                self.state = 582
                self.type_()
                pass
            elif token in [26]:
                self.state = 583
                self.match(GoParser.NIL_LIT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 593
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 586
                    self.match(GoParser.COMMA)
                    self.state = 589
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [3, 4, 9, 10, 11, 27, 28, 32, 62, 64]:
                        self.state = 587
                        self.type_()
                        pass
                    elif token in [26]:
                        self.state = 588
                        self.match(GoParser.NIL_LIT)
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 595
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(GoParser.SELECT, 0)

        def L_CURLY(self):
            return self.getToken(GoParser.L_CURLY, 0)

        def R_CURLY(self):
            return self.getToken(GoParser.R_CURLY, 0)

        def commClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.CommClauseContext)
            else:
                return self.getTypedRuleContext(GoParser.CommClauseContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_selectStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectStmt" ):
                listener.enterSelectStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectStmt" ):
                listener.exitSelectStmt(self)




    def selectStmt(self):

        localctx = GoParser.SelectStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_selectStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self.match(GoParser.SELECT)
            self.state = 597
            self.match(GoParser.L_CURLY)
            self.state = 601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2 or _la==6:
                self.state = 598
                self.commClause()
                self.state = 603
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 604
            self.match(GoParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commCase(self):
            return self.getTypedRuleContext(GoParser.CommCaseContext,0)


        def COLON(self):
            return self.getToken(GoParser.COLON, 0)

        def statementList(self):
            return self.getTypedRuleContext(GoParser.StatementListContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_commClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommClause" ):
                listener.enterCommClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommClause" ):
                listener.exitCommClause(self)




    def commClause(self):

        localctx = GoParser.CommClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_commClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self.commCase()
            self.state = 607
            self.match(GoParser.COLON)
            self.state = 609
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 608
                self.statementList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommCaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(GoParser.CASE, 0)

        def sendStmt(self):
            return self.getTypedRuleContext(GoParser.SendStmtContext,0)


        def recvStmt(self):
            return self.getTypedRuleContext(GoParser.RecvStmtContext,0)


        def DEFAULT(self):
            return self.getToken(GoParser.DEFAULT, 0)

        def getRuleIndex(self):
            return GoParser.RULE_commCase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommCase" ):
                listener.enterCommCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommCase" ):
                listener.exitCommCase(self)




    def commCase(self):

        localctx = GoParser.CommCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_commCase)
        try:
            self.state = 617
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 611
                self.match(GoParser.CASE)
                self.state = 614
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                if la_ == 1:
                    self.state = 612
                    self.sendStmt()
                    pass

                elif la_ == 2:
                    self.state = 613
                    self.recvStmt()
                    pass


                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 616
                self.match(GoParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecvStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.recvExpr = None # ExpressionContext

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(GoParser.ExpressionListContext,0)


        def ASSIGN(self):
            return self.getToken(GoParser.ASSIGN, 0)

        def identifierList(self):
            return self.getTypedRuleContext(GoParser.IdentifierListContext,0)


        def DECLARE_ASSIGN(self):
            return self.getToken(GoParser.DECLARE_ASSIGN, 0)

        def getRuleIndex(self):
            return GoParser.RULE_recvStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecvStmt" ):
                listener.enterRecvStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecvStmt" ):
                listener.exitRecvStmt(self)




    def recvStmt(self):

        localctx = GoParser.RecvStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_recvStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 619
                self.expressionList()
                self.state = 620
                self.match(GoParser.ASSIGN)

            elif la_ == 2:
                self.state = 622
                self.identifierList()
                self.state = 623
                self.match(GoParser.DECLARE_ASSIGN)


            self.state = 627
            localctx.recvExpr = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(GoParser.FOR, 0)

        def block(self):
            return self.getTypedRuleContext(GoParser.BlockContext,0)


        def forClause(self):
            return self.getTypedRuleContext(GoParser.ForClauseContext,0)


        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def rangeClause(self):
            return self.getTypedRuleContext(GoParser.RangeClauseContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_forStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)




    def forStmt(self):

        localctx = GoParser.ForStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_forStmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self.match(GoParser.FOR)
            self.state = 637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -288230371386978792) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 99135) != 0):
                    self.state = 630
                    self.expression(0)


                pass

            elif la_ == 2:
                self.state = 633
                self.forClause()
                pass

            elif la_ == 3:
                self.state = 635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -288230371386454504) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 99135) != 0):
                    self.state = 634
                    self.rangeClause()


                pass


            self.state = 639
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.initStmt = None # SimpleStmtContext
            self.postStmt = None # SimpleStmtContext

        def eos(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.EosContext)
            else:
                return self.getTypedRuleContext(GoParser.EosContext,i)


        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def simpleStmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.SimpleStmtContext)
            else:
                return self.getTypedRuleContext(GoParser.SimpleStmtContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_forClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForClause" ):
                listener.enterForClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForClause" ):
                listener.exitForClause(self)




    def forClause(self):

        localctx = GoParser.ForClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_forClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 641
                localctx.initStmt = self.simpleStmt()


            self.state = 644
            self.eos()
            self.state = 646
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 645
                self.expression(0)


            self.state = 648
            self.eos()
            self.state = 650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -288230371386978792) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 99135) != 0):
                self.state = 649
                localctx.postStmt = self.simpleStmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANGE(self):
            return self.getToken(GoParser.RANGE, 0)

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(GoParser.ExpressionListContext,0)


        def ASSIGN(self):
            return self.getToken(GoParser.ASSIGN, 0)

        def identifierList(self):
            return self.getTypedRuleContext(GoParser.IdentifierListContext,0)


        def DECLARE_ASSIGN(self):
            return self.getToken(GoParser.DECLARE_ASSIGN, 0)

        def getRuleIndex(self):
            return GoParser.RULE_rangeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeClause" ):
                listener.enterRangeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeClause" ):
                listener.exitRangeClause(self)




    def rangeClause(self):

        localctx = GoParser.RangeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_rangeClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 652
                self.expressionList()
                self.state = 653
                self.match(GoParser.ASSIGN)

            elif la_ == 2:
                self.state = 655
                self.identifierList()
                self.state = 656
                self.match(GoParser.DECLARE_ASSIGN)


            self.state = 660
            self.match(GoParser.RANGE)
            self.state = 661
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GoStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GO(self):
            return self.getToken(GoParser.GO, 0)

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_goStmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoStmt" ):
                listener.enterGoStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoStmt" ):
                listener.exitGoStmt(self)




    def goStmt(self):

        localctx = GoParser.GoStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_goStmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.match(GoParser.GO)
            self.state = 664
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(GoParser.TypeNameContext,0)


        def typeArgs(self):
            return self.getTypedRuleContext(GoParser.TypeArgsContext,0)


        def typeLit(self):
            return self.getTypedRuleContext(GoParser.TypeLitContext,0)


        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def getRuleIndex(self):
            return GoParser.RULE_type_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_" ):
                listener.enterType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_" ):
                listener.exitType_(self)




    def type_(self):

        localctx = GoParser.Type_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_type_)
        try:
            self.state = 675
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27]:
                self.enterOuterAlt(localctx, 1)
                self.state = 666
                self.typeName()
                self.state = 668
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                if la_ == 1:
                    self.state = 667
                    self.typeArgs()


                pass
            elif token in [3, 4, 9, 10, 11, 32, 62, 64]:
                self.enterOuterAlt(localctx, 2)
                self.state = 670
                self.typeLit()
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 3)
                self.state = 671
                self.match(GoParser.L_PAREN)
                self.state = 672
                self.type_()
                self.state = 673
                self.match(GoParser.R_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_BRACKET(self):
            return self.getToken(GoParser.L_BRACKET, 0)

        def typeList(self):
            return self.getTypedRuleContext(GoParser.TypeListContext,0)


        def R_BRACKET(self):
            return self.getToken(GoParser.R_BRACKET, 0)

        def COMMA(self):
            return self.getToken(GoParser.COMMA, 0)

        def getRuleIndex(self):
            return GoParser.RULE_typeArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgs" ):
                listener.enterTypeArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgs" ):
                listener.exitTypeArgs(self)




    def typeArgs(self):

        localctx = GoParser.TypeArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_typeArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.match(GoParser.L_BRACKET)
            self.state = 678
            self.typeList()
            self.state = 680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 679
                self.match(GoParser.COMMA)


            self.state = 682
            self.match(GoParser.R_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdent(self):
            return self.getTypedRuleContext(GoParser.QualifiedIdentContext,0)


        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GoParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)




    def typeName(self):

        localctx = GoParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_typeName)
        try:
            self.state = 686
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 684
                self.qualifiedIdent()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 685
                self.match(GoParser.IDENTIFIER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeLitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayType(self):
            return self.getTypedRuleContext(GoParser.ArrayTypeContext,0)


        def structType(self):
            return self.getTypedRuleContext(GoParser.StructTypeContext,0)


        def pointerType(self):
            return self.getTypedRuleContext(GoParser.PointerTypeContext,0)


        def functionType(self):
            return self.getTypedRuleContext(GoParser.FunctionTypeContext,0)


        def interfaceType(self):
            return self.getTypedRuleContext(GoParser.InterfaceTypeContext,0)


        def sliceType(self):
            return self.getTypedRuleContext(GoParser.SliceTypeContext,0)


        def mapType(self):
            return self.getTypedRuleContext(GoParser.MapTypeContext,0)


        def channelType(self):
            return self.getTypedRuleContext(GoParser.ChannelTypeContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_typeLit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeLit" ):
                listener.enterTypeLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeLit" ):
                listener.exitTypeLit(self)




    def typeLit(self):

        localctx = GoParser.TypeLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_typeLit)
        try:
            self.state = 696
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 688
                self.arrayType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 689
                self.structType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 690
                self.pointerType()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 691
                self.functionType()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 692
                self.interfaceType()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 693
                self.sliceType()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 694
                self.mapType()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 695
                self.channelType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_BRACKET(self):
            return self.getToken(GoParser.L_BRACKET, 0)

        def arrayLength(self):
            return self.getTypedRuleContext(GoParser.ArrayLengthContext,0)


        def R_BRACKET(self):
            return self.getToken(GoParser.R_BRACKET, 0)

        def elementType(self):
            return self.getTypedRuleContext(GoParser.ElementTypeContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)




    def arrayType(self):

        localctx = GoParser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_arrayType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self.match(GoParser.L_BRACKET)
            self.state = 699
            self.arrayLength()
            self.state = 700
            self.match(GoParser.R_BRACKET)
            self.state = 701
            self.elementType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_arrayLength

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLength" ):
                listener.enterArrayLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLength" ):
                listener.exitArrayLength(self)




    def arrayLength(self):

        localctx = GoParser.ArrayLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_arrayLength)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def getRuleIndex(self):
            return GoParser.RULE_elementType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementType" ):
                listener.enterElementType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementType" ):
                listener.exitElementType(self)




    def elementType(self):

        localctx = GoParser.ElementTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_elementType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 705
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(GoParser.STAR, 0)

        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def getRuleIndex(self):
            return GoParser.RULE_pointerType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerType" ):
                listener.enterPointerType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerType" ):
                listener.exitPointerType(self)




    def pointerType(self):

        localctx = GoParser.PointerTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_pointerType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.match(GoParser.STAR)
            self.state = 708
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(GoParser.INTERFACE, 0)

        def L_CURLY(self):
            return self.getToken(GoParser.L_CURLY, 0)

        def R_CURLY(self):
            return self.getToken(GoParser.R_CURLY, 0)

        def eos(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.EosContext)
            else:
                return self.getTypedRuleContext(GoParser.EosContext,i)


        def methodSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.MethodSpecContext)
            else:
                return self.getTypedRuleContext(GoParser.MethodSpecContext,i)


        def typeElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.TypeElementContext)
            else:
                return self.getTypedRuleContext(GoParser.TypeElementContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_interfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceType" ):
                listener.enterInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceType" ):
                listener.exitInterfaceType(self)




    def interfaceType(self):

        localctx = GoParser.InterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_interfaceType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.match(GoParser.INTERFACE)
            self.state = 711
            self.match(GoParser.L_CURLY)
            self.state = 720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 2900318160613802435) != 0):
                self.state = 714
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 712
                    self.methodSpec()
                    pass

                elif la_ == 2:
                    self.state = 713
                    self.typeElement()
                    pass


                self.state = 716
                self.eos()
                self.state = 722
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 723
            self.match(GoParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_BRACKET(self):
            return self.getToken(GoParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(GoParser.R_BRACKET, 0)

        def elementType(self):
            return self.getTypedRuleContext(GoParser.ElementTypeContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_sliceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceType" ):
                listener.enterSliceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceType" ):
                listener.exitSliceType(self)




    def sliceType(self):

        localctx = GoParser.SliceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_sliceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.match(GoParser.L_BRACKET)
            self.state = 726
            self.match(GoParser.R_BRACKET)
            self.state = 727
            self.elementType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAP(self):
            return self.getToken(GoParser.MAP, 0)

        def L_BRACKET(self):
            return self.getToken(GoParser.L_BRACKET, 0)

        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def R_BRACKET(self):
            return self.getToken(GoParser.R_BRACKET, 0)

        def elementType(self):
            return self.getTypedRuleContext(GoParser.ElementTypeContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_mapType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapType" ):
                listener.enterMapType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapType" ):
                listener.exitMapType(self)




    def mapType(self):

        localctx = GoParser.MapTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_mapType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            self.match(GoParser.MAP)
            self.state = 730
            self.match(GoParser.L_BRACKET)
            self.state = 731
            self.type_()
            self.state = 732
            self.match(GoParser.R_BRACKET)
            self.state = 733
            self.elementType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChannelTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementType(self):
            return self.getTypedRuleContext(GoParser.ElementTypeContext,0)


        def CHAN(self):
            return self.getToken(GoParser.CHAN, 0)

        def RECEIVE(self):
            return self.getToken(GoParser.RECEIVE, 0)

        def getRuleIndex(self):
            return GoParser.RULE_channelType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChannelType" ):
                listener.enterChannelType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChannelType" ):
                listener.exitChannelType(self)




    def channelType(self):

        localctx = GoParser.ChannelTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_channelType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 735
                self.match(GoParser.CHAN)
                pass

            elif la_ == 2:
                self.state = 736
                self.match(GoParser.CHAN)
                self.state = 737
                self.match(GoParser.RECEIVE)
                pass

            elif la_ == 3:
                self.state = 738
                self.match(GoParser.RECEIVE)
                self.state = 739
                self.match(GoParser.CHAN)
                pass


            self.state = 742
            self.elementType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def parameters(self):
            return self.getTypedRuleContext(GoParser.ParametersContext,0)


        def result(self):
            return self.getTypedRuleContext(GoParser.ResultContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_methodSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodSpec" ):
                listener.enterMethodSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodSpec" ):
                listener.exitMethodSpec(self)




    def methodSpec(self):

        localctx = GoParser.MethodSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_methodSpec)
        try:
            self.state = 750
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 744
                self.match(GoParser.IDENTIFIER)
                self.state = 745
                self.parameters()
                self.state = 746
                self.result()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 748
                self.match(GoParser.IDENTIFIER)
                self.state = 749
                self.parameters()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(GoParser.FUNC, 0)

        def signature(self):
            return self.getTypedRuleContext(GoParser.SignatureContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_functionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionType" ):
                listener.enterFunctionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionType" ):
                listener.exitFunctionType(self)




    def functionType(self):

        localctx = GoParser.FunctionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_functionType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.match(GoParser.FUNC)
            self.state = 753
            self.signature()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignatureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameters(self):
            return self.getTypedRuleContext(GoParser.ParametersContext,0)


        def result(self):
            return self.getTypedRuleContext(GoParser.ResultContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_signature

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignature" ):
                listener.enterSignature(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignature" ):
                listener.exitSignature(self)




    def signature(self):

        localctx = GoParser.SignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_signature)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.parameters()
            self.state = 757
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 756
                self.result()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameters(self):
            return self.getTypedRuleContext(GoParser.ParametersContext,0)


        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def getRuleIndex(self):
            return GoParser.RULE_result

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult" ):
                listener.enterResult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult" ):
                listener.exitResult(self)




    def result(self):

        localctx = GoParser.ResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_result)
        try:
            self.state = 761
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 759
                self.parameters()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 760
                self.type_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def parameterDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ParameterDeclContext)
            else:
                return self.getTypedRuleContext(GoParser.ParameterDeclContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.COMMA)
            else:
                return self.getToken(GoParser.COMMA, i)

        def getRuleIndex(self):
            return GoParser.RULE_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameters" ):
                listener.enterParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameters" ):
                listener.exitParameters(self)




    def parameters(self):

        localctx = GoParser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.match(GoParser.L_PAREN)
            self.state = 775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 2882304311860134339) != 0):
                self.state = 764
                self.parameterDecl()
                self.state = 769
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 765
                        self.match(GoParser.COMMA)
                        self.state = 766
                        self.parameterDecl() 
                    self.state = 771
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 772
                    self.match(GoParser.COMMA)




            self.state = 777
            self.match(GoParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def identifierList(self):
            return self.getTypedRuleContext(GoParser.IdentifierListContext,0)


        def ELLIPSIS(self):
            return self.getToken(GoParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return GoParser.RULE_parameterDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterDecl" ):
                listener.enterParameterDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterDecl" ):
                listener.exitParameterDecl(self)




    def parameterDecl(self):

        localctx = GoParser.ParameterDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_parameterDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 780
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 779
                self.identifierList()


            self.state = 783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 782
                self.match(GoParser.ELLIPSIS)


            self.state = 785
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unary_op = None # Token
            self.mul_op = None # Token
            self.add_op = None # Token
            self.rel_op = None # Token

        def primaryExpr(self):
            return self.getTypedRuleContext(GoParser.PrimaryExprContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GoParser.ExpressionContext,i)


        def PLUS(self):
            return self.getToken(GoParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(GoParser.MINUS, 0)

        def EXCLAMATION(self):
            return self.getToken(GoParser.EXCLAMATION, 0)

        def CARET(self):
            return self.getToken(GoParser.CARET, 0)

        def STAR(self):
            return self.getToken(GoParser.STAR, 0)

        def AMPERSAND(self):
            return self.getToken(GoParser.AMPERSAND, 0)

        def RECEIVE(self):
            return self.getToken(GoParser.RECEIVE, 0)

        def DIV(self):
            return self.getToken(GoParser.DIV, 0)

        def MOD(self):
            return self.getToken(GoParser.MOD, 0)

        def LSHIFT(self):
            return self.getToken(GoParser.LSHIFT, 0)

        def RSHIFT(self):
            return self.getToken(GoParser.RSHIFT, 0)

        def BIT_CLEAR(self):
            return self.getToken(GoParser.BIT_CLEAR, 0)

        def OR(self):
            return self.getToken(GoParser.OR, 0)

        def EQUALS(self):
            return self.getToken(GoParser.EQUALS, 0)

        def NOT_EQUALS(self):
            return self.getToken(GoParser.NOT_EQUALS, 0)

        def LESS(self):
            return self.getToken(GoParser.LESS, 0)

        def LESS_OR_EQUALS(self):
            return self.getToken(GoParser.LESS_OR_EQUALS, 0)

        def GREATER(self):
            return self.getToken(GoParser.GREATER, 0)

        def GREATER_OR_EQUALS(self):
            return self.getToken(GoParser.GREATER_OR_EQUALS, 0)

        def LOGICAL_AND(self):
            return self.getToken(GoParser.LOGICAL_AND, 0)

        def LOGICAL_OR(self):
            return self.getToken(GoParser.LOGICAL_OR, 0)

        def getRuleIndex(self):
            return GoParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GoParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 152
        self.enterRecursionRule(localctx, 152, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 791
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 788
                self.primaryExpr(0)
                pass

            elif la_ == 2:
                self.state = 789
                localctx.unary_op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & 127) != 0)):
                    localctx.unary_op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 790
                self.expression(6)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 810
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 808
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                    if la_ == 1:
                        localctx = GoParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 793
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 794
                        localctx.mul_op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -4472074429978902528) != 0)):
                            localctx.mul_op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 795
                        self.expression(6)
                        pass

                    elif la_ == 2:
                        localctx = GoParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 796
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 797
                        localctx.add_op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4037477065937649664) != 0)):
                            localctx.add_op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 798
                        self.expression(5)
                        pass

                    elif la_ == 3:
                        localctx = GoParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 799
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 800
                        localctx.rel_op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2216615441596416) != 0)):
                            localctx.rel_op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 801
                        self.expression(4)
                        pass

                    elif la_ == 4:
                        localctx = GoParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 802
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 803
                        self.match(GoParser.LOGICAL_AND)
                        self.state = 804
                        self.expression(3)
                        pass

                    elif la_ == 5:
                        localctx = GoParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 805
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 806
                        self.match(GoParser.LOGICAL_OR)
                        self.state = 807
                        self.expression(2)
                        pass

             
                self.state = 812
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operand(self):
            return self.getTypedRuleContext(GoParser.OperandContext,0)


        def conversion(self):
            return self.getTypedRuleContext(GoParser.ConversionContext,0)


        def methodExpr(self):
            return self.getTypedRuleContext(GoParser.MethodExprContext,0)


        def primaryExpr(self):
            return self.getTypedRuleContext(GoParser.PrimaryExprContext,0)


        def DOT(self):
            return self.getToken(GoParser.DOT, 0)

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def index(self):
            return self.getTypedRuleContext(GoParser.IndexContext,0)


        def slice_(self):
            return self.getTypedRuleContext(GoParser.Slice_Context,0)


        def typeAssertion(self):
            return self.getTypedRuleContext(GoParser.TypeAssertionContext,0)


        def arguments(self):
            return self.getTypedRuleContext(GoParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_primaryExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpr" ):
                listener.enterPrimaryExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpr" ):
                listener.exitPrimaryExpr(self)



    def primaryExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GoParser.PrimaryExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 154
        self.enterRecursionRule(localctx, 154, self.RULE_primaryExpr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 817
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 814
                self.operand()
                pass

            elif la_ == 2:
                self.state = 815
                self.conversion()
                pass

            elif la_ == 3:
                self.state = 816
                self.methodExpr()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 830
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = GoParser.PrimaryExprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpr)
                    self.state = 819
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 826
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                    if la_ == 1:
                        self.state = 820
                        self.match(GoParser.DOT)
                        self.state = 821
                        self.match(GoParser.IDENTIFIER)
                        pass

                    elif la_ == 2:
                        self.state = 822
                        self.index()
                        pass

                    elif la_ == 3:
                        self.state = 823
                        self.slice_()
                        pass

                    elif la_ == 4:
                        self.state = 824
                        self.typeAssertion()
                        pass

                    elif la_ == 5:
                        self.state = 825
                        self.arguments()
                        pass

             
                self.state = 832
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConversionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def COMMA(self):
            return self.getToken(GoParser.COMMA, 0)

        def getRuleIndex(self):
            return GoParser.RULE_conversion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversion" ):
                listener.enterConversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversion" ):
                listener.exitConversion(self)




    def conversion(self):

        localctx = GoParser.ConversionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_conversion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 833
            self.type_()
            self.state = 834
            self.match(GoParser.L_PAREN)
            self.state = 835
            self.expression(0)
            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 836
                self.match(GoParser.COMMA)


            self.state = 839
            self.match(GoParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(GoParser.LiteralContext,0)


        def operandName(self):
            return self.getTypedRuleContext(GoParser.OperandNameContext,0)


        def typeArgs(self):
            return self.getTypedRuleContext(GoParser.TypeArgsContext,0)


        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def getRuleIndex(self):
            return GoParser.RULE_operand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperand" ):
                listener.enterOperand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperand" ):
                listener.exitOperand(self)




    def operand(self):

        localctx = GoParser.OperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_operand)
        try:
            self.state = 850
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 841
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 842
                self.operandName()
                self.state = 844
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                if la_ == 1:
                    self.state = 843
                    self.typeArgs()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 846
                self.match(GoParser.L_PAREN)
                self.state = 847
                self.expression(0)
                self.state = 848
                self.match(GoParser.R_PAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basicLit(self):
            return self.getTypedRuleContext(GoParser.BasicLitContext,0)


        def compositeLit(self):
            return self.getTypedRuleContext(GoParser.CompositeLitContext,0)


        def functionLit(self):
            return self.getTypedRuleContext(GoParser.FunctionLitContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = GoParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_literal)
        try:
            self.state = 855
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26, 65, 66, 67, 68, 69, 72, 73, 79, 80]:
                self.enterOuterAlt(localctx, 1)
                self.state = 852
                self.basicLit()
                pass
            elif token in [9, 10, 27, 32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 853
                self.compositeLit()
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 3)
                self.state = 854
                self.functionLit()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasicLitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NIL_LIT(self):
            return self.getToken(GoParser.NIL_LIT, 0)

        def integer(self):
            return self.getTypedRuleContext(GoParser.IntegerContext,0)


        def string_(self):
            return self.getTypedRuleContext(GoParser.String_Context,0)


        def FLOAT_LIT(self):
            return self.getToken(GoParser.FLOAT_LIT, 0)

        def getRuleIndex(self):
            return GoParser.RULE_basicLit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicLit" ):
                listener.enterBasicLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicLit" ):
                listener.exitBasicLit(self)




    def basicLit(self):

        localctx = GoParser.BasicLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_basicLit)
        try:
            self.state = 861
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                self.enterOuterAlt(localctx, 1)
                self.state = 857
                self.match(GoParser.NIL_LIT)
                pass
            elif token in [65, 66, 67, 68, 72, 73]:
                self.enterOuterAlt(localctx, 2)
                self.state = 858
                self.integer()
                pass
            elif token in [79, 80]:
                self.enterOuterAlt(localctx, 3)
                self.state = 859
                self.string_()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 4)
                self.state = 860
                self.match(GoParser.FLOAT_LIT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LIT(self):
            return self.getToken(GoParser.DECIMAL_LIT, 0)

        def BINARY_LIT(self):
            return self.getToken(GoParser.BINARY_LIT, 0)

        def OCTAL_LIT(self):
            return self.getToken(GoParser.OCTAL_LIT, 0)

        def HEX_LIT(self):
            return self.getToken(GoParser.HEX_LIT, 0)

        def IMAGINARY_LIT(self):
            return self.getToken(GoParser.IMAGINARY_LIT, 0)

        def RUNE_LIT(self):
            return self.getToken(GoParser.RUNE_LIT, 0)

        def getRuleIndex(self):
            return GoParser.RULE_integer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger" ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger" ):
                listener.exitInteger(self)




    def integer(self):

        localctx = GoParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_integer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            _la = self._input.LA(1)
            if not(((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 399) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperandNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GoParser.RULE_operandName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperandName" ):
                listener.enterOperandName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperandName" ):
                listener.exitOperandName(self)




    def operandName(self):

        localctx = GoParser.OperandNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_operandName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.match(GoParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedIdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.IDENTIFIER)
            else:
                return self.getToken(GoParser.IDENTIFIER, i)

        def DOT(self):
            return self.getToken(GoParser.DOT, 0)

        def getRuleIndex(self):
            return GoParser.RULE_qualifiedIdent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdent" ):
                listener.enterQualifiedIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdent" ):
                listener.exitQualifiedIdent(self)




    def qualifiedIdent(self):

        localctx = GoParser.QualifiedIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_qualifiedIdent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.match(GoParser.IDENTIFIER)
            self.state = 868
            self.match(GoParser.DOT)
            self.state = 869
            self.match(GoParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompositeLitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literalType(self):
            return self.getTypedRuleContext(GoParser.LiteralTypeContext,0)


        def literalValue(self):
            return self.getTypedRuleContext(GoParser.LiteralValueContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_compositeLit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompositeLit" ):
                listener.enterCompositeLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompositeLit" ):
                listener.exitCompositeLit(self)




    def compositeLit(self):

        localctx = GoParser.CompositeLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_compositeLit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.literalType()
            self.state = 872
            self.literalValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structType(self):
            return self.getTypedRuleContext(GoParser.StructTypeContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(GoParser.ArrayTypeContext,0)


        def L_BRACKET(self):
            return self.getToken(GoParser.L_BRACKET, 0)

        def ELLIPSIS(self):
            return self.getToken(GoParser.ELLIPSIS, 0)

        def R_BRACKET(self):
            return self.getToken(GoParser.R_BRACKET, 0)

        def elementType(self):
            return self.getTypedRuleContext(GoParser.ElementTypeContext,0)


        def sliceType(self):
            return self.getTypedRuleContext(GoParser.SliceTypeContext,0)


        def mapType(self):
            return self.getTypedRuleContext(GoParser.MapTypeContext,0)


        def typeName(self):
            return self.getTypedRuleContext(GoParser.TypeNameContext,0)


        def typeArgs(self):
            return self.getTypedRuleContext(GoParser.TypeArgsContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_literalType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralType" ):
                listener.enterLiteralType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralType" ):
                listener.exitLiteralType(self)




    def literalType(self):

        localctx = GoParser.LiteralTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_literalType)
        self._la = 0 # Token type
        try:
            self.state = 886
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 874
                self.structType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 875
                self.arrayType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 876
                self.match(GoParser.L_BRACKET)
                self.state = 877
                self.match(GoParser.ELLIPSIS)
                self.state = 878
                self.match(GoParser.R_BRACKET)
                self.state = 879
                self.elementType()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 880
                self.sliceType()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 881
                self.mapType()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 882
                self.typeName()
                self.state = 884
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==32:
                    self.state = 883
                    self.typeArgs()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_CURLY(self):
            return self.getToken(GoParser.L_CURLY, 0)

        def R_CURLY(self):
            return self.getToken(GoParser.R_CURLY, 0)

        def elementList(self):
            return self.getTypedRuleContext(GoParser.ElementListContext,0)


        def COMMA(self):
            return self.getToken(GoParser.COMMA, 0)

        def getRuleIndex(self):
            return GoParser.RULE_literalValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralValue" ):
                listener.enterLiteralValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralValue" ):
                listener.exitLiteralValue(self)




    def literalValue(self):

        localctx = GoParser.LiteralValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_literalValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 888
            self.match(GoParser.L_CURLY)
            self.state = 893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -288230370313236968) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 99135) != 0):
                self.state = 889
                self.elementList()
                self.state = 891
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 890
                    self.match(GoParser.COMMA)




            self.state = 895
            self.match(GoParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.KeyedElementContext)
            else:
                return self.getTypedRuleContext(GoParser.KeyedElementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.COMMA)
            else:
                return self.getToken(GoParser.COMMA, i)

        def getRuleIndex(self):
            return GoParser.RULE_elementList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementList" ):
                listener.enterElementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementList" ):
                listener.exitElementList(self)




    def elementList(self):

        localctx = GoParser.ElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_elementList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.keyedElement()
            self.state = 902
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 898
                    self.match(GoParser.COMMA)
                    self.state = 899
                    self.keyedElement() 
                self.state = 904
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyedElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element(self):
            return self.getTypedRuleContext(GoParser.ElementContext,0)


        def key(self):
            return self.getTypedRuleContext(GoParser.KeyContext,0)


        def COLON(self):
            return self.getToken(GoParser.COLON, 0)

        def getRuleIndex(self):
            return GoParser.RULE_keyedElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyedElement" ):
                listener.enterKeyedElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyedElement" ):
                listener.exitKeyedElement(self)




    def keyedElement(self):

        localctx = GoParser.KeyedElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_keyedElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 908
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 905
                self.key()
                self.state = 906
                self.match(GoParser.COLON)


            self.state = 910
            self.element()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def literalValue(self):
            return self.getTypedRuleContext(GoParser.LiteralValueContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey" ):
                listener.enterKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey" ):
                listener.exitKey(self)




    def key(self):

        localctx = GoParser.KeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_key)
        try:
            self.state = 914
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 9, 10, 11, 26, 27, 28, 32, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 79, 80]:
                self.enterOuterAlt(localctx, 1)
                self.state = 912
                self.expression(0)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 2)
                self.state = 913
                self.literalValue()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def literalValue(self):
            return self.getTypedRuleContext(GoParser.LiteralValueContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement" ):
                listener.enterElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement" ):
                listener.exitElement(self)




    def element(self):

        localctx = GoParser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_element)
        try:
            self.state = 918
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 4, 9, 10, 11, 26, 27, 28, 32, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 79, 80]:
                self.enterOuterAlt(localctx, 1)
                self.state = 916
                self.expression(0)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 2)
                self.state = 917
                self.literalValue()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCT(self):
            return self.getToken(GoParser.STRUCT, 0)

        def L_CURLY(self):
            return self.getToken(GoParser.L_CURLY, 0)

        def R_CURLY(self):
            return self.getToken(GoParser.R_CURLY, 0)

        def fieldDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.FieldDeclContext)
            else:
                return self.getTypedRuleContext(GoParser.FieldDeclContext,i)


        def eos(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.EosContext)
            else:
                return self.getTypedRuleContext(GoParser.EosContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_structType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructType" ):
                listener.enterStructType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructType" ):
                listener.exitStructType(self)




    def structType(self):

        localctx = GoParser.StructTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_structType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self.match(GoParser.STRUCT)
            self.state = 921
            self.match(GoParser.L_CURLY)
            self.state = 927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==27 or _la==62:
                self.state = 922
                self.fieldDecl()
                self.state = 923
                self.eos()
                self.state = 929
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 930
            self.match(GoParser.R_CURLY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tag = None # String_Context

        def identifierList(self):
            return self.getTypedRuleContext(GoParser.IdentifierListContext,0)


        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def embeddedField(self):
            return self.getTypedRuleContext(GoParser.EmbeddedFieldContext,0)


        def string_(self):
            return self.getTypedRuleContext(GoParser.String_Context,0)


        def getRuleIndex(self):
            return GoParser.RULE_fieldDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDecl" ):
                listener.enterFieldDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDecl" ):
                listener.exitFieldDecl(self)




    def fieldDecl(self):

        localctx = GoParser.FieldDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_fieldDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 932
                self.identifierList()
                self.state = 933
                self.type_()
                pass

            elif la_ == 2:
                self.state = 935
                self.embeddedField()
                pass


            self.state = 939
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 938
                localctx.tag = self.string_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAW_STRING_LIT(self):
            return self.getToken(GoParser.RAW_STRING_LIT, 0)

        def INTERPRETED_STRING_LIT(self):
            return self.getToken(GoParser.INTERPRETED_STRING_LIT, 0)

        def getRuleIndex(self):
            return GoParser.RULE_string_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_" ):
                listener.enterString_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_" ):
                listener.exitString_(self)




    def string_(self):

        localctx = GoParser.String_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_string_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 941
            _la = self._input.LA(1)
            if not(_la==79 or _la==80):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmbeddedFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(GoParser.TypeNameContext,0)


        def STAR(self):
            return self.getToken(GoParser.STAR, 0)

        def typeArgs(self):
            return self.getTypedRuleContext(GoParser.TypeArgsContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_embeddedField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmbeddedField" ):
                listener.enterEmbeddedField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmbeddedField" ):
                listener.exitEmbeddedField(self)




    def embeddedField(self):

        localctx = GoParser.EmbeddedFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_embeddedField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 943
                self.match(GoParser.STAR)


            self.state = 946
            self.typeName()
            self.state = 948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                self.state = 947
                self.typeArgs()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionLitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(GoParser.FUNC, 0)

        def signature(self):
            return self.getTypedRuleContext(GoParser.SignatureContext,0)


        def block(self):
            return self.getTypedRuleContext(GoParser.BlockContext,0)


        def getRuleIndex(self):
            return GoParser.RULE_functionLit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionLit" ):
                listener.enterFunctionLit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionLit" ):
                listener.exitFunctionLit(self)




    def functionLit(self):

        localctx = GoParser.FunctionLitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_functionLit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self.match(GoParser.FUNC)
            self.state = 951
            self.signature()
            self.state = 952
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_BRACKET(self):
            return self.getToken(GoParser.L_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(GoParser.ExpressionContext,0)


        def R_BRACKET(self):
            return self.getToken(GoParser.R_BRACKET, 0)

        def getRuleIndex(self):
            return GoParser.RULE_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex" ):
                listener.enterIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex" ):
                listener.exitIndex(self)




    def index(self):

        localctx = GoParser.IndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            self.match(GoParser.L_BRACKET)
            self.state = 955
            self.expression(0)
            self.state = 956
            self.match(GoParser.R_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Slice_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_BRACKET(self):
            return self.getToken(GoParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(GoParser.R_BRACKET, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.COLON)
            else:
                return self.getToken(GoParser.COLON, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GoParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(GoParser.ExpressionContext,i)


        def getRuleIndex(self):
            return GoParser.RULE_slice_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlice_" ):
                listener.enterSlice_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlice_" ):
                listener.exitSlice_(self)




    def slice_(self):

        localctx = GoParser.Slice_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_slice_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self.match(GoParser.L_BRACKET)
            self.state = 974
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 960
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -288230371386978792) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 99135) != 0):
                    self.state = 959
                    self.expression(0)


                self.state = 962
                self.match(GoParser.COLON)
                self.state = 964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -288230371386978792) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 99135) != 0):
                    self.state = 963
                    self.expression(0)


                pass

            elif la_ == 2:
                self.state = 967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -288230371386978792) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 99135) != 0):
                    self.state = 966
                    self.expression(0)


                self.state = 969
                self.match(GoParser.COLON)
                self.state = 970
                self.expression(0)
                self.state = 971
                self.match(GoParser.COLON)
                self.state = 972
                self.expression(0)
                pass


            self.state = 976
            self.match(GoParser.R_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAssertionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(GoParser.DOT, 0)

        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def getRuleIndex(self):
            return GoParser.RULE_typeAssertion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAssertion" ):
                listener.enterTypeAssertion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAssertion" ):
                listener.exitTypeAssertion(self)




    def typeAssertion(self):

        localctx = GoParser.TypeAssertionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_typeAssertion)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 978
            self.match(GoParser.DOT)
            self.state = 979
            self.match(GoParser.L_PAREN)
            self.state = 980
            self.type_()
            self.state = 981
            self.match(GoParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(GoParser.L_PAREN, 0)

        def R_PAREN(self):
            return self.getToken(GoParser.R_PAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(GoParser.ExpressionListContext,0)


        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def ELLIPSIS(self):
            return self.getToken(GoParser.ELLIPSIS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(GoParser.COMMA)
            else:
                return self.getToken(GoParser.COMMA, i)

        def getRuleIndex(self):
            return GoParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)




    def arguments(self):

        localctx = GoParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 983
            self.match(GoParser.L_PAREN)
            self.state = 998
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -288230371386978792) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 99135) != 0):
                self.state = 990
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
                if la_ == 1:
                    self.state = 984
                    self.expressionList()
                    pass

                elif la_ == 2:
                    self.state = 985
                    self.type_()
                    self.state = 988
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                    if la_ == 1:
                        self.state = 986
                        self.match(GoParser.COMMA)
                        self.state = 987
                        self.expressionList()


                    pass


                self.state = 993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==42:
                    self.state = 992
                    self.match(GoParser.ELLIPSIS)


                self.state = 996
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 995
                    self.match(GoParser.COMMA)




            self.state = 1000
            self.match(GoParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(GoParser.Type_Context,0)


        def DOT(self):
            return self.getToken(GoParser.DOT, 0)

        def IDENTIFIER(self):
            return self.getToken(GoParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return GoParser.RULE_methodExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodExpr" ):
                listener.enterMethodExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodExpr" ):
                listener.exitMethodExpr(self)




    def methodExpr(self):

        localctx = GoParser.MethodExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_methodExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            self.type_()
            self.state = 1003
            self.match(GoParser.DOT)
            self.state = 1004
            self.match(GoParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EosContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(GoParser.SEMI, 0)

        def EOF(self):
            return self.getToken(GoParser.EOF, 0)

        def EOS(self):
            return self.getToken(GoParser.EOS, 0)

        def getRuleIndex(self):
            return GoParser.RULE_eos

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEos" ):
                listener.enterEos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEos" ):
                listener.exitEos(self)




    def eos(self):

        localctx = GoParser.EosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_eos)
        try:
            self.state = 1010
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1006
                self.match(GoParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1007
                self.match(GoParser.EOF)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1008
                self.match(GoParser.EOS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1009
                if not self.closingBracket():
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.closingBracket()")
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[24] = self.statementList_sempred
        self._predicates[76] = self.expression_sempred
        self._predicates[77] = self.primaryExpr_sempred
        self._predicates[102] = self.eos_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def statementList_sempred(self, localctx:StatementListContext, predIndex:int):
            if predIndex == 0:
                return self.closingBracket()
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         

    def primaryExpr_sempred(self, localctx:PrimaryExprContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         

    def eos_sempred(self, localctx:EosContext, predIndex:int):
            if predIndex == 7:
                return self.closingBracket()
         




